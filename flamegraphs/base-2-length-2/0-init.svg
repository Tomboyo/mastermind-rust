<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1300" height="246" onload="init(evt)" viewBox="0 0 1300 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1300.0" height="246.0" fill="url(#background)"  />
<text id="title" x="650.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="229" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1190.00" y="24" >Search</text>
<text id="ignorecase" x="1274.00" y="24" >ic</text>
<text id="matched" x="1190.00" y="229" > </text>
<g id="frames">
<g >
<title>_dl_map_object (2 samples, 0.10%)</title><rect x="1069.6" y="165" width="1.4" height="15.0" fill="rgb(222,89,30)" rx="2" ry="2" />
<text  x="1072.61" y="175.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1 samples, 0.05%)</title><rect x="1289.3" y="165" width="0.7" height="15.0" fill="rgb(243,172,53)" rx="2" ry="2" />
<text  x="1292.33" y="175.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.05%)</title><rect x="226.4" y="117" width="0.6" height="15.0" fill="rgb(215,93,4)" rx="2" ry="2" />
<text  x="229.36" y="127.5" ></text>
</g>
<g >
<title>malloc (170 samples, 8.92%)</title><rect x="1159.6" y="165" width="114.3" height="15.0" fill="rgb(254,36,21)" rx="2" ry="2" />
<text  x="1162.65" y="175.5" >malloc</text>
</g>
<g >
<title>realloc (1 samples, 0.05%)</title><rect x="223.0" y="85" width="0.7" height="15.0" fill="rgb(208,170,6)" rx="2" ry="2" />
<text  x="226.00" y="95.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth (2 samples, 0.10%)</title><rect x="266.7" y="133" width="1.3" height="15.0" fill="rgb(219,77,21)" rx="2" ry="2" />
<text  x="269.67" y="143.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.10%)</title><rect x="224.3" y="101" width="1.4" height="15.0" fill="rgb(242,24,9)" rx="2" ry="2" />
<text  x="227.34" y="111.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.21%)</title><rect x="810.3" y="149" width="2.6" height="15.0" fill="rgb(209,228,20)" rx="2" ry="2" />
<text  x="813.25" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.26%)</title><rect x="237.8" y="133" width="3.3" height="15.0" fill="rgb(211,203,43)" rx="2" ry="2" />
<text  x="240.78" y="143.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (34 samples, 1.78%)</title><rect x="1033.3" y="149" width="22.9" height="15.0" fill="rgb(217,28,47)" rx="2" ry="2" />
<text  x="1036.33" y="159.5" >m..</text>
</g>
<g >
<title>[unknown] (47 samples, 2.47%)</title><rect x="200.2" y="133" width="31.5" height="15.0" fill="rgb(248,123,50)" rx="2" ry="2" />
<text  x="203.15" y="143.5" >[u..</text>
</g>
<g >
<title>[unknown] (20 samples, 1.05%)</title><rect x="212.9" y="117" width="13.5" height="15.0" fill="rgb(205,103,52)" rx="2" ry="2" />
<text  x="215.92" y="127.5" ></text>
</g>
<g >
<title>realloc (2 samples, 0.10%)</title><rect x="1287.3" y="165" width="1.4" height="15.0" fill="rgb(223,15,32)" rx="2" ry="2" />
<text  x="1290.31" y="175.5" ></text>
</g>
<g >
<title>[unknown] (1,526 samples, 80.10%)</title><rect x="31.5" y="165" width="1025.3" height="15.0" fill="rgb(248,191,35)" rx="2" ry="2" />
<text  x="34.50" y="175.5" >[unknown]</text>
</g>
<g >
<title>strcmp (1 samples, 0.05%)</title><rect x="1288.7" y="165" width="0.6" height="15.0" fill="rgb(221,23,48)" rx="2" ry="2" />
<text  x="1291.66" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (13 samples, 0.68%)</title><rect x="1117.3" y="165" width="8.8" height="15.0" fill="rgb(234,116,26)" rx="2" ry="2" />
<text  x="1120.32" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.05%)</title><rect x="689.3" y="149" width="0.7" height="15.0" fill="rgb(232,90,11)" rx="2" ry="2" />
<text  x="692.31" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 1.94%)</title><rect x="65.8" y="149" width="24.8" height="15.0" fill="rgb(244,197,27)" rx="2" ry="2" />
<text  x="68.77" y="159.5" >&lt;..</text>
</g>
<g >
<title>__rust_alloc (14 samples, 0.73%)</title><rect x="464.2" y="149" width="9.4" height="15.0" fill="rgb(245,115,17)" rx="2" ry="2" />
<text  x="467.22" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (10 samples, 0.52%)</title><rect x="1126.1" y="165" width="6.7" height="15.0" fill="rgb(224,160,32)" rx="2" ry="2" />
<text  x="1129.05" y="175.5" ></text>
</g>
<g >
<title>__brk (1 samples, 0.05%)</title><rect x="276.8" y="149" width="0.6" height="15.0" fill="rgb(233,74,16)" rx="2" ry="2" />
<text  x="279.75" y="159.5" ></text>
</g>
<g >
<title>_int_free (179 samples, 9.40%)</title><rect x="479.7" y="149" width="120.2" height="15.0" fill="rgb(241,192,43)" rx="2" ry="2" />
<text  x="482.67" y="159.5" >_int_free</text>
</g>
<g >
<title>__rdl_alloc (3 samples, 0.16%)</title><rect x="190.1" y="101" width="2.0" height="15.0" fill="rgb(249,79,49)" rx="2" ry="2" />
<text  x="193.07" y="111.5" ></text>
</g>
<g >
<title>realloc (5 samples, 0.26%)</title><rect x="273.4" y="133" width="3.4" height="15.0" fill="rgb(215,4,23)" rx="2" ry="2" />
<text  x="276.39" y="143.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::Entry&lt;K,V&gt;::or_insert_with (14 samples, 0.73%)</title><rect x="190.1" y="117" width="9.4" height="15.0" fill="rgb(230,163,10)" rx="2" ry="2" />
<text  x="193.07" y="127.5" ></text>
</g>
<g >
<title>malloc (48 samples, 2.52%)</title><rect x="813.6" y="149" width="32.3" height="15.0" fill="rgb(223,207,50)" rx="2" ry="2" />
<text  x="816.61" y="159.5" >ma..</text>
</g>
<g >
<title>mastermind::code::universe (2 samples, 0.10%)</title><rect x="247.9" y="133" width="1.3" height="15.0" fill="rgb(240,139,39)" rx="2" ry="2" />
<text  x="250.86" y="143.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (1 samples, 0.05%)</title><rect x="1280.6" y="165" width="0.7" height="15.0" fill="rgb(215,229,24)" rx="2" ry="2" />
<text  x="1283.59" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.05%)</title><rect x="225.7" y="101" width="0.7" height="15.0" fill="rgb(251,23,35)" rx="2" ry="2" />
<text  x="228.69" y="111.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (1 samples, 0.05%)</title><rect x="231.1" y="117" width="0.6" height="15.0" fill="rgb(233,125,20)" rx="2" ry="2" />
<text  x="234.06" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.16%)</title><rect x="210.9" y="117" width="2.0" height="15.0" fill="rgb(233,143,12)" rx="2" ry="2" />
<text  x="213.90" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.10%)</title><rect x="206.9" y="117" width="1.3" height="15.0" fill="rgb(216,6,26)" rx="2" ry="2" />
<text  x="209.87" y="127.5" ></text>
</g>
<g >
<title>_int_free (16 samples, 0.84%)</title><rect x="1071.0" y="165" width="10.7" height="15.0" fill="rgb(210,90,29)" rx="2" ry="2" />
<text  x="1073.96" y="175.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.10%)</title><rect x="245.2" y="133" width="1.3" height="15.0" fill="rgb(249,0,15)" rx="2" ry="2" />
<text  x="248.17" y="143.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="812.9" y="149" width="0.7" height="15.0" fill="rgb(213,223,0)" rx="2" ry="2" />
<text  x="815.94" y="159.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (39 samples, 2.05%)</title><rect x="989.0" y="149" width="26.2" height="15.0" fill="rgb(235,98,37)" rx="2" ry="2" />
<text  x="991.98" y="159.5" >m..</text>
</g>
<g >
<title>mastermind::tree::rank::by_depth (27 samples, 1.42%)</title><rect x="1015.2" y="149" width="18.1" height="15.0" fill="rgb(250,158,24)" rx="2" ry="2" />
<text  x="1018.19" y="159.5" ></text>
</g>
<g >
<title>mastermind::code::compare (10 samples, 0.52%)</title><rect x="1273.9" y="165" width="6.7" height="15.0" fill="rgb(216,72,22)" rx="2" ry="2" />
<text  x="1276.87" y="175.5" ></text>
</g>
<g >
<title>mastermind::code::compare (79 samples, 4.15%)</title><rect x="845.9" y="149" width="53.0" height="15.0" fill="rgb(244,161,23)" rx="2" ry="2" />
<text  x="848.86" y="159.5" >maste..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (50 samples, 2.62%)</title><rect x="776.7" y="149" width="33.6" height="15.0" fill="rgb(223,140,45)" rx="2" ry="2" />
<text  x="779.66" y="159.5" >cf..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (7 samples, 0.37%)</title><rect x="18.7" y="165" width="4.7" height="15.0" fill="rgb(210,23,32)" rx="2" ry="2" />
<text  x="21.73" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.05%)</title><rect x="222.3" y="85" width="0.7" height="15.0" fill="rgb(238,49,41)" rx="2" ry="2" />
<text  x="225.33" y="95.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.47%)</title><rect x="200.8" y="117" width="6.1" height="15.0" fill="rgb(254,144,19)" rx="2" ry="2" />
<text  x="203.82" y="127.5" ></text>
</g>
<g >
<title>mastermind-899f (1,905 samples, 100.00%)</title><rect x="10.0" y="181" width="1280.0" height="15.0" fill="rgb(221,117,41)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >mastermind-899f</text>
</g>
<g >
<title>_dl_sysdep_start (3 samples, 0.16%)</title><rect x="477.7" y="149" width="2.0" height="15.0" fill="rgb(237,2,50)" rx="2" ry="2" />
<text  x="480.65" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.63%)</title><rect x="110.8" y="149" width="8.1" height="15.0" fill="rgb(213,71,48)" rx="2" ry="2" />
<text  x="113.79" y="159.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (3 samples, 0.16%)</title><rect x="271.4" y="133" width="2.0" height="15.0" fill="rgb(247,11,1)" rx="2" ry="2" />
<text  x="274.38" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="12.7" y="165" width="1.3" height="15.0" fill="rgb(224,152,28)" rx="2" ry="2" />
<text  x="15.69" y="175.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.05%)</title><rect x="237.1" y="133" width="0.7" height="15.0" fill="rgb(251,147,45)" rx="2" ry="2" />
<text  x="240.11" y="143.5" ></text>
</g>
<g >
<title>_int_realloc (5 samples, 0.26%)</title><rect x="606.0" y="149" width="3.3" height="15.0" fill="rgb(252,214,24)" rx="2" ry="2" />
<text  x="608.99" y="159.5" ></text>
</g>
<g >
<title>__rdl_realloc (2 samples, 0.10%)</title><rect x="1068.3" y="165" width="1.3" height="15.0" fill="rgb(253,96,0)" rx="2" ry="2" />
<text  x="1071.27" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (1 samples, 0.05%)</title><rect x="1159.0" y="165" width="0.6" height="15.0" fill="rgb(208,167,52)" rx="2" ry="2" />
<text  x="1161.98" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (9 samples, 0.47%)</title><rect x="599.9" y="149" width="6.1" height="15.0" fill="rgb(233,195,31)" rx="2" ry="2" />
<text  x="602.94" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.21%)</title><rect x="118.9" y="133" width="2.6" height="15.0" fill="rgb(251,172,47)" rx="2" ry="2" />
<text  x="121.85" y="143.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (10 samples, 0.52%)</title><rect x="384.3" y="149" width="6.7" height="15.0" fill="rgb(251,60,15)" rx="2" ry="2" />
<text  x="387.26" y="159.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (135 samples, 7.09%)</title><rect x="293.5" y="149" width="90.8" height="15.0" fill="rgb(214,10,51)" rx="2" ry="2" />
<text  x="296.55" y="159.5" >__memmove_..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.37%)</title><rect x="1138.1" y="165" width="4.8" height="15.0" fill="rgb(242,71,25)" rx="2" ry="2" />
<text  x="1141.15" y="175.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 0.05%)</title><rect x="1069.6" y="149" width="0.7" height="15.0" fill="rgb(252,41,22)" rx="2" ry="2" />
<text  x="1072.61" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (4 samples, 0.21%)</title><rect x="686.6" y="149" width="2.7" height="15.0" fill="rgb(213,184,38)" rx="2" ry="2" />
<text  x="689.62" y="159.5" ></text>
</g>
<g >
<title>[unknown] (235 samples, 12.34%)</title><rect x="118.9" y="149" width="157.9" height="15.0" fill="rgb(207,141,7)" rx="2" ry="2" />
<text  x="121.85" y="159.5" >[unknown]</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.37%)</title><rect x="192.1" y="101" width="4.7" height="15.0" fill="rgb(238,214,20)" rx="2" ry="2" />
<text  x="195.09" y="111.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.05%)</title><rect x="246.5" y="133" width="0.7" height="15.0" fill="rgb(246,77,18)" rx="2" ry="2" />
<text  x="249.51" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.37%)</title><rect x="14.0" y="165" width="4.7" height="15.0" fill="rgb(233,172,39)" rx="2" ry="2" />
<text  x="17.03" y="175.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (7 samples, 0.37%)</title><rect x="1056.8" y="165" width="4.7" height="15.0" fill="rgb(208,136,42)" rx="2" ry="2" />
<text  x="1059.85" y="175.5" ></text>
</g>
<g >
<title>mastermind::tree::select (5 samples, 0.26%)</title><rect x="268.0" y="133" width="3.4" height="15.0" fill="rgb(228,229,42)" rx="2" ry="2" />
<text  x="271.02" y="143.5" ></text>
</g>
<g >
<title>core::option::Option&lt;&amp;T&gt;::cloned (1 samples, 0.05%)</title><rect x="1156.3" y="165" width="0.7" height="15.0" fill="rgb(237,221,6)" rx="2" ry="2" />
<text  x="1159.29" y="175.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (24 samples, 1.26%)</title><rect x="277.4" y="149" width="16.1" height="15.0" fill="rgb(230,68,21)" rx="2" ry="2" />
<text  x="280.42" y="159.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="199.5" y="133" width="0.7" height="15.0" fill="rgb(206,226,16)" rx="2" ry="2" />
<text  x="202.48" y="143.5" ></text>
</g>
<g >
<title>__rust_alloc (2 samples, 0.10%)</title><rect x="235.8" y="133" width="1.3" height="15.0" fill="rgb(251,163,15)" rx="2" ry="2" />
<text  x="238.76" y="143.5" ></text>
</g>
<g >
<title>lseek64 (1 samples, 0.05%)</title><rect x="1070.3" y="149" width="0.7" height="15.0" fill="rgb(253,64,47)" rx="2" ry="2" />
<text  x="1073.28" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (9 samples, 0.47%)</title><rect x="59.7" y="149" width="6.1" height="15.0" fill="rgb(244,107,3)" rx="2" ry="2" />
<text  x="62.72" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (3 samples, 0.16%)</title><rect x="1115.3" y="165" width="2.0" height="15.0" fill="rgb(214,102,30)" rx="2" ry="2" />
<text  x="1118.30" y="175.5" ></text>
</g>
<g >
<title>_int_realloc (6 samples, 0.31%)</title><rect x="241.1" y="133" width="4.1" height="15.0" fill="rgb(214,113,0)" rx="2" ry="2" />
<text  x="244.14" y="143.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.05%)</title><rect x="223.7" y="101" width="0.6" height="15.0" fill="rgb(239,58,3)" rx="2" ry="2" />
<text  x="226.67" y="111.5" ></text>
</g>
<g >
<title>mastermind::code::compare (4 samples, 0.21%)</title><rect x="196.8" y="101" width="2.7" height="15.0" fill="rgb(207,228,7)" rx="2" ry="2" />
<text  x="199.79" y="111.5" ></text>
</g>
<g >
<title>mastermind::tree::select (6 samples, 0.31%)</title><rect x="1283.3" y="165" width="4.0" height="15.0" fill="rgb(219,11,40)" rx="2" ry="2" />
<text  x="1286.28" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (41 samples, 2.15%)</title><rect x="1081.7" y="165" width="27.6" height="15.0" fill="rgb(225,166,17)" rx="2" ry="2" />
<text  x="1084.71" y="175.5" >_..</text>
</g>
<g >
<title>mastermind::tree::generate_children (23 samples, 1.21%)</title><rect x="251.2" y="133" width="15.5" height="15.0" fill="rgb(244,70,44)" rx="2" ry="2" />
<text  x="254.22" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.26%)</title><rect x="227.7" y="117" width="3.4" height="15.0" fill="rgb(206,58,18)" rx="2" ry="2" />
<text  x="230.70" y="127.5" ></text>
</g>
<g >
<title>all (1,905 samples, 100%)</title><rect x="10.0" y="197" width="1280.0" height="15.0" fill="rgb(216,19,23)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (26 samples, 1.36%)</title><rect x="971.5" y="149" width="17.5" height="15.0" fill="rgb(228,169,5)" rx="2" ry="2" />
<text  x="974.51" y="159.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.05%)</title><rect x="217.6" y="53" width="0.7" height="15.0" fill="rgb(241,102,39)" rx="2" ry="2" />
<text  x="220.62" y="63.5" ></text>
</g>
<g >
<title>__rdl_alloc (5 samples, 0.26%)</title><rect x="231.7" y="133" width="3.4" height="15.0" fill="rgb(220,207,10)" rx="2" ry="2" />
<text  x="234.73" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="208.2" y="117" width="0.7" height="15.0" fill="rgb(246,200,30)" rx="2" ry="2" />
<text  x="211.22" y="127.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (2 samples, 0.10%)</title><rect x="1157.0" y="165" width="1.3" height="15.0" fill="rgb(224,28,28)" rx="2" ry="2" />
<text  x="1159.96" y="175.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.05%)</title><rect x="218.3" y="53" width="0.7" height="15.0" fill="rgb(213,187,4)" rx="2" ry="2" />
<text  x="221.29" y="63.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="215.6" y="69" width="0.7" height="15.0" fill="rgb(241,94,17)" rx="2" ry="2" />
<text  x="218.61" y="79.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::Entry&lt;K,V&gt;::or_insert_with (39 samples, 2.05%)</title><rect x="660.4" y="149" width="26.2" height="15.0" fill="rgb(242,105,6)" rx="2" ry="2" />
<text  x="663.41" y="159.5" >a..</text>
</g>
<g >
<title>mastermind::tree::rank::by_depth (2 samples, 0.10%)</title><rect x="1281.9" y="165" width="1.4" height="15.0" fill="rgb(218,22,54)" rx="2" ry="2" />
<text  x="1284.94" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (4 samples, 0.21%)</title><rect x="657.7" y="149" width="2.7" height="15.0" fill="rgb(252,224,3)" rx="2" ry="2" />
<text  x="660.73" y="159.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1 samples, 0.05%)</title><rect x="1056.2" y="149" width="0.6" height="15.0" fill="rgb(206,181,34)" rx="2" ry="2" />
<text  x="1059.17" y="159.5" ></text>
</g>
<g >
<title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.16%)</title><rect x="27.5" y="165" width="2.0" height="15.0" fill="rgb(231,95,20)" rx="2" ry="2" />
<text  x="30.47" y="175.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (87 samples, 4.57%)</title><rect x="391.0" y="149" width="58.4" height="15.0" fill="rgb(254,89,2)" rx="2" ry="2" />
<text  x="393.98" y="159.5" >__mems..</text>
</g>
<g >
<title>malloc (1 samples, 0.05%)</title><rect x="247.2" y="133" width="0.7" height="15.0" fill="rgb(244,146,33)" rx="2" ry="2" />
<text  x="250.19" y="143.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (21 samples, 1.10%)</title><rect x="731.6" y="149" width="14.1" height="15.0" fill="rgb(228,223,21)" rx="2" ry="2" />
<text  x="734.64" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (62 samples, 3.25%)</title><rect x="690.0" y="149" width="41.6" height="15.0" fill="rgb(253,38,19)" rx="2" ry="2" />
<text  x="692.98" y="159.5" >all..</text>
</g>
<g >
<title>__rust_dealloc (5 samples, 0.26%)</title><rect x="473.6" y="149" width="3.4" height="15.0" fill="rgb(239,133,29)" rx="2" ry="2" />
<text  x="476.62" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.05%)</title><rect x="200.2" y="117" width="0.6" height="15.0" fill="rgb(224,105,24)" rx="2" ry="2" />
<text  x="203.15" y="127.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_exhaustively (1 samples, 0.05%)</title><rect x="1281.3" y="165" width="0.6" height="15.0" fill="rgb(250,74,6)" rx="2" ry="2" />
<text  x="1284.27" y="175.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.16%)</title><rect x="57.7" y="149" width="2.0" height="15.0" fill="rgb(207,223,6)" rx="2" ry="2" />
<text  x="60.71" y="159.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.05%)</title><rect x="1067.6" y="165" width="0.7" height="15.0" fill="rgb(249,94,36)" rx="2" ry="2" />
<text  x="1070.60" y="175.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.68%)</title><rect x="214.9" y="101" width="8.8" height="15.0" fill="rgb(237,195,44)" rx="2" ry="2" />
<text  x="217.93" y="111.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="217.6" y="37" width="0.7" height="15.0" fill="rgb(213,228,13)" rx="2" ry="2" />
<text  x="220.62" y="47.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.16%)</title><rect x="29.5" y="165" width="2.0" height="15.0" fill="rgb(208,124,30)" rx="2" ry="2" />
<text  x="32.49" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 1.57%)</title><rect x="90.6" y="149" width="20.2" height="15.0" fill="rgb(245,148,6)" rx="2" ry="2" />
<text  x="93.63" y="159.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (9 samples, 0.47%)</title><rect x="1061.5" y="165" width="6.1" height="15.0" fill="rgb(244,116,15)" rx="2" ry="2" />
<text  x="1064.55" y="175.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.05%)</title><rect x="479.0" y="133" width="0.7" height="15.0" fill="rgb(214,31,15)" rx="2" ry="2" />
<text  x="482.00" y="143.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.26%)</title><rect x="216.3" y="69" width="3.3" height="15.0" fill="rgb(247,31,4)" rx="2" ry="2" />
<text  x="219.28" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.05%)</title><rect x="1158.3" y="165" width="0.7" height="15.0" fill="rgb(240,12,22)" rx="2" ry="2" />
<text  x="1161.30" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 3.46%)</title><rect x="155.1" y="133" width="44.4" height="15.0" fill="rgb(236,112,48)" rx="2" ry="2" />
<text  x="158.13" y="143.5" >&lt;cor..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 2.41%)</title><rect x="745.7" y="149" width="31.0" height="15.0" fill="rgb(205,27,30)" rx="2" ry="2" />
<text  x="748.75" y="159.5" >al..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (20 samples, 1.05%)</title><rect x="1142.9" y="165" width="13.4" height="15.0" fill="rgb(247,129,37)" rx="2" ry="2" />
<text  x="1145.85" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.16%)</title><rect x="208.9" y="117" width="2.0" height="15.0" fill="rgb(237,120,52)" rx="2" ry="2" />
<text  x="211.89" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="214.9" y="85" width="0.7" height="15.0" fill="rgb(245,93,5)" rx="2" ry="2" />
<text  x="217.93" y="95.5" ></text>
</g>
<g >
<title>_dl_check_map_versions (1 samples, 0.05%)</title><rect x="477.0" y="149" width="0.7" height="15.0" fill="rgb(213,129,47)" rx="2" ry="2" />
<text  x="479.98" y="159.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.05%)</title><rect x="479.0" y="117" width="0.7" height="15.0" fill="rgb(244,150,40)" rx="2" ry="2" />
<text  x="482.00" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.26%)</title><rect x="24.1" y="165" width="3.4" height="15.0" fill="rgb(213,190,30)" rx="2" ry="2" />
<text  x="27.11" y="175.5" ></text>
</g>
<g >
<title>__rdl_dealloc (7 samples, 0.37%)</title><rect x="459.5" y="149" width="4.7" height="15.0" fill="rgb(227,45,46)" rx="2" ry="2" />
<text  x="462.51" y="159.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.05%)</title><rect x="219.0" y="53" width="0.6" height="15.0" fill="rgb(237,87,35)" rx="2" ry="2" />
<text  x="221.97" y="63.5" ></text>
</g>
<g >
<title>_int_malloc (4 samples, 0.21%)</title><rect x="219.6" y="69" width="2.7" height="15.0" fill="rgb(248,44,22)" rx="2" ry="2" />
<text  x="222.64" y="79.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (8 samples, 0.42%)</title><rect x="1132.8" y="165" width="5.3" height="15.0" fill="rgb(227,34,3)" rx="2" ry="2" />
<text  x="1135.77" y="175.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.52%)</title><rect x="215.6" y="85" width="6.7" height="15.0" fill="rgb(214,180,31)" rx="2" ry="2" />
<text  x="218.61" y="95.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (108 samples, 5.67%)</title><rect x="898.9" y="149" width="72.6" height="15.0" fill="rgb(211,126,54)" rx="2" ry="2" />
<text  x="901.94" y="159.5" >mastermi..</text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (72 samples, 3.78%)</title><rect x="609.3" y="149" width="48.4" height="15.0" fill="rgb(254,176,33)" rx="2" ry="2" />
<text  x="612.35" y="159.5" >allo..</text>
</g>
<g >
<title>mastermind::tree::answers_by_response (3 samples, 0.16%)</title><rect x="249.2" y="133" width="2.0" height="15.0" fill="rgb(232,149,44)" rx="2" ry="2" />
<text  x="252.20" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="216.3" y="53" width="1.3" height="15.0" fill="rgb(238,113,43)" rx="2" ry="2" />
<text  x="219.28" y="63.5" ></text>
</g>
<g >
<title>_start (9 samples, 0.47%)</title><rect x="1109.3" y="165" width="6.0" height="15.0" fill="rgb(233,224,34)" rx="2" ry="2" />
<text  x="1112.25" y="175.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1 samples, 0.05%)</title><rect x="478.3" y="133" width="0.7" height="15.0" fill="rgb(236,103,8)" rx="2" ry="2" />
<text  x="481.33" y="143.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.05%)</title><rect x="227.0" y="117" width="0.7" height="15.0" fill="rgb(221,113,14)" rx="2" ry="2" />
<text  x="230.03" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.16%)</title><rect x="212.9" y="101" width="2.0" height="15.0" fill="rgb(219,118,25)" rx="2" ry="2" />
<text  x="215.92" y="111.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 2.05%)</title><rect x="31.5" y="149" width="26.2" height="15.0" fill="rgb(209,67,27)" rx="2" ry="2" />
<text  x="34.50" y="159.5" >&lt;..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="23.4" y="165" width="0.7" height="15.0" fill="rgb(222,68,52)" rx="2" ry="2" />
<text  x="26.44" y="175.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 1.42%)</title><rect x="121.5" y="133" width="18.2" height="15.0" fill="rgb(251,179,11)" rx="2" ry="2" />
<text  x="124.54" y="143.5" ></text>
</g>
<g >
<title>__rdl_alloc (15 samples, 0.79%)</title><rect x="449.4" y="149" width="10.1" height="15.0" fill="rgb(237,161,15)" rx="2" ry="2" />
<text  x="452.43" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (23 samples, 1.21%)</title><rect x="139.7" y="133" width="15.4" height="15.0" fill="rgb(205,149,1)" rx="2" ry="2" />
<text  x="142.68" y="143.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.05%)</title><rect x="235.1" y="133" width="0.7" height="15.0" fill="rgb(245,213,35)" rx="2" ry="2" />
<text  x="238.09" y="143.5" ></text>
</g>
</g>
</svg>
