<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1300" height="342" onload="init(evt)" viewBox="0 0 1300 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1300.0" height="342.0" fill="url(#background)"  />
<text id="title" x="650.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1190.00" y="24" >Search</text>
<text id="ignorecase" x="1274.00" y="24" >ic</text>
<text id="matched" x="1190.00" y="325" > </text>
<g id="frames">
<g >
<title>mastermind::code::compare (2 samples, 0.10%)</title><rect x="191.6" y="197" width="1.3" height="15.0" fill="rgb(234,3,24)" rx="2" ry="2" />
<text  x="194.56" y="207.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.05%)</title><rect x="1051.8" y="261" width="0.7" height="15.0" fill="rgb(227,180,45)" rx="2" ry="2" />
<text  x="1054.83" y="271.5" ></text>
</g>
<g >
<title>__rust_alloc (2 samples, 0.10%)</title><rect x="924.3" y="261" width="1.3" height="15.0" fill="rgb(246,73,26)" rx="2" ry="2" />
<text  x="927.29" y="271.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.25%)</title><rect x="733.6" y="245" width="3.3" height="15.0" fill="rgb(251,186,10)" rx="2" ry="2" />
<text  x="736.62" y="255.5" ></text>
</g>
<g >
<title>mastermind::tree::RefTree::to_tree (3 samples, 0.15%)</title><rect x="1171.6" y="261" width="1.9" height="15.0" fill="rgb(254,1,4)" rx="2" ry="2" />
<text  x="1174.57" y="271.5" ></text>
</g>
<g >
<title>__libc_write (3 samples, 0.15%)</title><rect x="909.3" y="261" width="2.0" height="15.0" fill="rgb(226,126,9)" rx="2" ry="2" />
<text  x="912.32" y="271.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (8 samples, 0.41%)</title><rect x="225.4" y="213" width="5.2" height="15.0" fill="rgb(230,50,33)" rx="2" ry="2" />
<text  x="228.39" y="223.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (32 samples, 1.63%)</title><rect x="712.8" y="245" width="20.8" height="15.0" fill="rgb(229,99,37)" rx="2" ry="2" />
<text  x="715.80" y="255.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (11 samples, 0.56%)</title><rect x="1184.6" y="261" width="7.1" height="15.0" fill="rgb(231,167,24)" rx="2" ry="2" />
<text  x="1187.58" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.46%)</title><rect x="114.8" y="245" width="5.8" height="15.0" fill="rgb(245,27,5)" rx="2" ry="2" />
<text  x="117.77" y="255.5" ></text>
</g>
<g >
<title>_int_free (18 samples, 0.92%)</title><rect x="928.2" y="261" width="11.7" height="15.0" fill="rgb(223,5,26)" rx="2" ry="2" />
<text  x="931.19" y="271.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (5 samples, 0.25%)</title><rect x="262.5" y="213" width="3.2" height="15.0" fill="rgb(217,226,13)" rx="2" ry="2" />
<text  x="265.49" y="223.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (69 samples, 3.51%)</title><rect x="418.0" y="245" width="44.9" height="15.0" fill="rgb(244,8,35)" rx="2" ry="2" />
<text  x="421.01" y="255.5" >__me..</text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (6 samples, 0.31%)</title><rect x="918.4" y="261" width="3.9" height="15.0" fill="rgb(244,126,16)" rx="2" ry="2" />
<text  x="921.43" y="271.5" ></text>
</g>
<g >
<title>[unknown] (21 samples, 1.07%)</title><rect x="163.6" y="165" width="13.6" height="15.0" fill="rgb(247,102,27)" rx="2" ry="2" />
<text  x="166.57" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (37 samples, 1.88%)</title><rect x="673.8" y="245" width="24.0" height="15.0" fill="rgb(214,131,8)" rx="2" ry="2" />
<text  x="676.75" y="255.5" >a..</text>
</g>
<g >
<title>mastermind::code::compare (24 samples, 1.22%)</title><rect x="1155.9" y="261" width="15.7" height="15.0" fill="rgb(211,23,29)" rx="2" ry="2" />
<text  x="1158.95" y="271.5" ></text>
</g>
<g >
<title>__libc_sigaction (1 samples, 0.05%)</title><rect x="278.8" y="229" width="0.6" height="15.0" fill="rgb(214,92,52)" rx="2" ry="2" />
<text  x="281.75" y="239.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (7 samples, 0.36%)</title><rect x="413.5" y="245" width="4.5" height="15.0" fill="rgb(234,194,26)" rx="2" ry="2" />
<text  x="416.46" y="255.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (4 samples, 0.20%)</title><rect x="1285.4" y="261" width="2.6" height="15.0" fill="rgb(228,2,35)" rx="2" ry="2" />
<text  x="1288.44" y="271.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.05%)</title><rect x="181.1" y="197" width="0.7" height="15.0" fill="rgb(245,90,48)" rx="2" ry="2" />
<text  x="184.14" y="207.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (197 samples, 10.02%)</title><rect x="285.3" y="245" width="128.2" height="15.0" fill="rgb(251,167,46)" rx="2" ry="2" />
<text  x="288.26" y="255.5" >__memmove_sse2_u..</text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.05%)</title><rect x="922.3" y="261" width="0.7" height="15.0" fill="rgb(212,138,51)" rx="2" ry="2" />
<text  x="925.33" y="271.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.41%)</title><rect x="164.2" y="69" width="5.2" height="15.0" fill="rgb(230,20,12)" rx="2" ry="2" />
<text  x="167.22" y="79.5" ></text>
</g>
<g >
<title>__GI___close_nocancel (1 samples, 0.05%)</title><rect x="908.7" y="261" width="0.6" height="15.0" fill="rgb(220,189,45)" rx="2" ry="2" />
<text  x="911.67" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.10%)</title><rect x="552.7" y="245" width="1.3" height="15.0" fill="rgb(244,144,10)" rx="2" ry="2" />
<text  x="555.71" y="255.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.20%)</title><rect x="138.2" y="229" width="2.6" height="15.0" fill="rgb(242,171,1)" rx="2" ry="2" />
<text  x="141.20" y="239.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (2 samples, 0.10%)</title><rect x="281.4" y="229" width="1.3" height="15.0" fill="rgb(213,75,18)" rx="2" ry="2" />
<text  x="284.36" y="239.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.05%)</title><rect x="470.1" y="245" width="0.6" height="15.0" fill="rgb(208,124,1)" rx="2" ry="2" />
<text  x="473.07" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (1 samples, 0.05%)</title><rect x="1058.3" y="261" width="0.7" height="15.0" fill="rgb(215,33,14)" rx="2" ry="2" />
<text  x="1061.34" y="271.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (4 samples, 0.20%)</title><rect x="1052.5" y="261" width="2.6" height="15.0" fill="rgb(235,100,8)" rx="2" ry="2" />
<text  x="1055.48" y="271.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (20 samples, 1.02%)</title><rect x="192.9" y="197" width="13.0" height="15.0" fill="rgb(220,33,48)" rx="2" ry="2" />
<text  x="195.86" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (30 samples, 1.53%)</title><rect x="142.1" y="213" width="19.5" height="15.0" fill="rgb(235,53,47)" rx="2" ry="2" />
<text  x="145.10" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (1 samples, 0.05%)</title><rect x="165.5" y="37" width="0.7" height="15.0" fill="rgb(215,33,17)" rx="2" ry="2" />
<text  x="168.53" y="47.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="137.5" y="229" width="0.7" height="15.0" fill="rgb(241,80,16)" rx="2" ry="2" />
<text  x="140.54" y="239.5" ></text>
</g>
<g >
<title>mastermind-899f (1,967 samples, 100.00%)</title><rect x="10.0" y="277" width="1280.0" height="15.0" fill="rgb(247,111,43)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >mastermind-899f</text>
</g>
<g >
<title>[unknown] (212 samples, 10.78%)</title><rect x="140.8" y="229" width="138.0" height="15.0" fill="rgb(213,122,46)" rx="2" ry="2" />
<text  x="143.80" y="239.5" >[unknown]</text>
</g>
<g >
<title>mmap64 (2 samples, 0.10%)</title><rect x="1288.0" y="261" width="1.3" height="15.0" fill="rgb(227,13,46)" rx="2" ry="2" />
<text  x="1291.05" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.46%)</title><rect x="256.0" y="213" width="5.8" height="15.0" fill="rgb(251,43,23)" rx="2" ry="2" />
<text  x="258.98" y="223.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (9 samples, 0.46%)</title><rect x="1015.4" y="261" width="5.8" height="15.0" fill="rgb(245,49,0)" rx="2" ry="2" />
<text  x="1018.39" y="271.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.05%)</title><rect x="205.9" y="197" width="0.6" height="15.0" fill="rgb(245,224,5)" rx="2" ry="2" />
<text  x="208.87" y="207.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (3 samples, 0.15%)</title><rect x="283.3" y="245" width="2.0" height="15.0" fill="rgb(248,90,20)" rx="2" ry="2" />
<text  x="286.31" y="255.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.10%)</title><rect x="279.4" y="229" width="1.3" height="15.0" fill="rgb(233,160,28)" rx="2" ry="2" />
<text  x="282.41" y="239.5" ></text>
</g>
<g >
<title>[unknown] (23 samples, 1.17%)</title><rect x="162.9" y="181" width="15.0" height="15.0" fill="rgb(245,15,20)" rx="2" ry="2" />
<text  x="165.92" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.81%)</title><rect x="1021.2" y="261" width="10.5" height="15.0" fill="rgb(228,193,30)" rx="2" ry="2" />
<text  x="1024.25" y="271.5" ></text>
</g>
<g >
<title>_int_realloc (1 samples, 0.05%)</title><rect x="554.0" y="245" width="0.7" height="15.0" fill="rgb(245,64,38)" rx="2" ry="2" />
<text  x="557.02" y="255.5" ></text>
</g>
<g >
<title>__brk (1 samples, 0.05%)</title><rect x="282.7" y="245" width="0.6" height="15.0" fill="rgb(240,107,24)" rx="2" ry="2" />
<text  x="285.66" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (9 samples, 0.46%)</title><rect x="939.9" y="261" width="5.9" height="15.0" fill="rgb(251,72,43)" rx="2" ry="2" />
<text  x="942.90" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (10 samples, 0.51%)</title><rect x="127.1" y="245" width="6.5" height="15.0" fill="rgb(205,97,5)" rx="2" ry="2" />
<text  x="130.13" y="255.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.15%)</title><rect x="252.1" y="213" width="1.9" height="15.0" fill="rgb(228,27,36)" rx="2" ry="2" />
<text  x="255.07" y="223.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 2.64%)</title><rect x="79.0" y="261" width="33.8" height="15.0" fill="rgb(238,150,34)" rx="2" ry="2" />
<text  x="81.98" y="271.5" >&lt;c..</text>
</g>
<g >
<title>unlink_chunk.isra.0 (1 samples, 0.05%)</title><rect x="1289.3" y="261" width="0.7" height="15.0" fill="rgb(241,165,52)" rx="2" ry="2" />
<text  x="1292.35" y="271.5" ></text>
</g>
<g >
<title>memset (1 samples, 0.05%)</title><rect x="927.5" y="245" width="0.7" height="15.0" fill="rgb(209,93,36)" rx="2" ry="2" />
<text  x="930.54" y="255.5" ></text>
</g>
<g >
<title>__GI_____strtoull_l_internal (1 samples, 0.05%)</title><rect x="908.0" y="261" width="0.7" height="15.0" fill="rgb(243,37,9)" rx="2" ry="2" />
<text  x="911.02" y="271.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (144 samples, 7.32%)</title><rect x="1191.7" y="261" width="93.7" height="15.0" fill="rgb(223,164,28)" rx="2" ry="2" />
<text  x="1194.74" y="271.5" >mastermind:..</text>
</g>
<g >
<title>__memcmp_sse4_1 (29 samples, 1.47%)</title><rect x="206.5" y="213" width="18.9" height="15.0" fill="rgb(212,25,51)" rx="2" ry="2" />
<text  x="209.52" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc (3 samples, 0.15%)</title><rect x="250.1" y="213" width="2.0" height="15.0" fill="rgb(248,75,31)" rx="2" ry="2" />
<text  x="253.12" y="223.5" ></text>
</g>
<g >
<title>__rdl_dealloc (3 samples, 0.15%)</title><rect x="468.1" y="245" width="2.0" height="15.0" fill="rgb(205,211,33)" rx="2" ry="2" />
<text  x="471.12" y="255.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (4 samples, 0.20%)</title><rect x="597.6" y="245" width="2.6" height="15.0" fill="rgb(224,85,17)" rx="2" ry="2" />
<text  x="600.62" y="255.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2 samples, 0.10%)</title><rect x="167.5" y="37" width="1.3" height="15.0" fill="rgb(224,153,43)" rx="2" ry="2" />
<text  x="170.48" y="47.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.10%)</title><rect x="140.8" y="213" width="1.3" height="15.0" fill="rgb(253,129,9)" rx="2" ry="2" />
<text  x="143.80" y="223.5" ></text>
</g>
<g >
<title>[unknown] (229 samples, 11.64%)</title><rect x="133.6" y="245" width="149.1" height="15.0" fill="rgb(218,165,50)" rx="2" ry="2" />
<text  x="136.64" y="255.5" >[unknown]</text>
</g>
<g >
<title>malloc (1 samples, 0.05%)</title><rect x="261.8" y="213" width="0.7" height="15.0" fill="rgb(224,4,13)" rx="2" ry="2" />
<text  x="264.84" y="223.5" ></text>
</g>
<g >
<title>all (1,967 samples, 100%)</title><rect x="10.0" y="293" width="1280.0" height="15.0" fill="rgb(226,202,6)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (20 samples, 1.02%)</title><rect x="990.7" y="261" width="13.0" height="15.0" fill="rgb(233,68,3)" rx="2" ry="2" />
<text  x="993.66" y="271.5" ></text>
</g>
<g >
<title>__rdl_realloc (1 samples, 0.05%)</title><rect x="177.9" y="181" width="0.6" height="15.0" fill="rgb(234,182,3)" rx="2" ry="2" />
<text  x="180.89" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.51%)</title><rect x="120.6" y="245" width="6.5" height="15.0" fill="rgb(251,71,27)" rx="2" ry="2" />
<text  x="123.63" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="164.2" y="53" width="0.7" height="15.0" fill="rgb(254,100,10)" rx="2" ry="2" />
<text  x="167.22" y="63.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.20%)</title><rect x="189.0" y="197" width="2.6" height="15.0" fill="rgb(244,154,1)" rx="2" ry="2" />
<text  x="191.95" y="207.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (66 samples, 3.36%)</title><rect x="554.7" y="245" width="42.9" height="15.0" fill="rgb(219,91,0)" rx="2" ry="2" />
<text  x="557.67" y="255.5" >allo..</text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.05%)</title><rect x="246.9" y="213" width="0.6" height="15.0" fill="rgb(220,211,33)" rx="2" ry="2" />
<text  x="249.87" y="223.5" ></text>
</g>
<g >
<title>__rust_dealloc (6 samples, 0.31%)</title><rect x="470.7" y="245" width="3.9" height="15.0" fill="rgb(223,197,9)" rx="2" ry="2" />
<text  x="473.72" y="255.5" ></text>
</g>
<g >
<title>malloc (14 samples, 0.71%)</title><rect x="736.9" y="245" width="9.1" height="15.0" fill="rgb(227,99,27)" rx="2" ry="2" />
<text  x="739.87" y="255.5" ></text>
</g>
<g >
<title>__rdl_dealloc (2 samples, 0.10%)</title><rect x="923.0" y="261" width="1.3" height="15.0" fill="rgb(217,83,39)" rx="2" ry="2" />
<text  x="925.98" y="271.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 4.58%)</title><rect x="16.5" y="261" width="58.6" height="15.0" fill="rgb(210,73,49)" rx="2" ry="2" />
<text  x="19.51" y="271.5" >&lt;alloc..</text>
</g>
<g >
<title>[unknown] (6 samples, 0.31%)</title><rect x="164.9" y="53" width="3.9" height="15.0" fill="rgb(216,98,33)" rx="2" ry="2" />
<text  x="167.88" y="63.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (25 samples, 1.27%)</title><rect x="230.6" y="213" width="16.3" height="15.0" fill="rgb(239,73,8)" rx="2" ry="2" />
<text  x="233.60" y="223.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (25 samples, 1.27%)</title><rect x="974.4" y="261" width="16.3" height="15.0" fill="rgb(239,178,26)" rx="2" ry="2" />
<text  x="977.39" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 1.17%)</title><rect x="697.8" y="245" width="15.0" height="15.0" fill="rgb(231,198,22)" rx="2" ry="2" />
<text  x="700.83" y="255.5" ></text>
</g>
<g >
<title>_dl_map_object (2 samples, 0.10%)</title><rect x="926.9" y="261" width="1.3" height="15.0" fill="rgb(238,43,27)" rx="2" ry="2" />
<text  x="929.89" y="271.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (12 samples, 0.61%)</title><rect x="966.6" y="261" width="7.8" height="15.0" fill="rgb(223,212,12)" rx="2" ry="2" />
<text  x="969.58" y="271.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (2 samples, 0.10%)</title><rect x="178.5" y="181" width="1.3" height="15.0" fill="rgb(218,119,2)" rx="2" ry="2" />
<text  x="181.54" y="191.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 1.07%)</title><rect x="952.9" y="261" width="13.7" height="15.0" fill="rgb(246,141,49)" rx="2" ry="2" />
<text  x="955.92" y="271.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (6 samples, 0.31%)</title><rect x="911.3" y="261" width="3.9" height="15.0" fill="rgb(249,192,31)" rx="2" ry="2" />
<text  x="914.27" y="271.5" ></text>
</g>
<g >
<title>realloc (20 samples, 1.02%)</title><rect x="265.7" y="213" width="13.1" height="15.0" fill="rgb(252,158,24)" rx="2" ry="2" />
<text  x="268.74" y="223.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (1 samples, 0.05%)</title><rect x="164.9" y="37" width="0.6" height="15.0" fill="rgb(250,107,25)" rx="2" ry="2" />
<text  x="167.88" y="47.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (17 samples, 0.86%)</title><rect x="1173.5" y="261" width="11.1" height="15.0" fill="rgb(239,194,46)" rx="2" ry="2" />
<text  x="1176.52" y="271.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (29 samples, 1.47%)</title><rect x="869.6" y="245" width="18.9" height="15.0" fill="rgb(212,9,26)" rx="2" ry="2" />
<text  x="872.62" y="255.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 0.05%)</title><rect x="926.9" y="245" width="0.6" height="15.0" fill="rgb(241,152,50)" rx="2" ry="2" />
<text  x="929.89" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="78.3" y="261" width="0.7" height="15.0" fill="rgb(240,69,27)" rx="2" ry="2" />
<text  x="81.33" y="271.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.05%)</title><rect x="177.2" y="165" width="0.7" height="15.0" fill="rgb(219,42,47)" rx="2" ry="2" />
<text  x="180.24" y="175.5" ></text>
</g>
<g >
<title>__rdl_alloc (2 samples, 0.10%)</title><rect x="179.8" y="197" width="1.3" height="15.0" fill="rgb(206,43,7)" rx="2" ry="2" />
<text  x="182.84" y="207.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.41%)</title><rect x="164.2" y="85" width="5.2" height="15.0" fill="rgb(220,27,39)" rx="2" ry="2" />
<text  x="167.22" y="95.5" ></text>
</g>
<g >
<title>__rdl_alloc (8 samples, 0.41%)</title><rect x="462.9" y="245" width="5.2" height="15.0" fill="rgb(243,131,46)" rx="2" ry="2" />
<text  x="465.91" y="255.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (4 samples, 0.20%)</title><rect x="474.6" y="245" width="2.6" height="15.0" fill="rgb(241,182,34)" rx="2" ry="2" />
<text  x="477.63" y="255.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::Entry&lt;K,V&gt;::or_insert_with (62 samples, 3.15%)</title><rect x="600.2" y="245" width="40.4" height="15.0" fill="rgb(219,179,38)" rx="2" ry="2" />
<text  x="603.22" y="255.5" >all..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (31 samples, 1.58%)</title><rect x="1031.7" y="261" width="20.1" height="15.0" fill="rgb(217,187,45)" rx="2" ry="2" />
<text  x="1034.66" y="271.5" ></text>
</g>
<g >
<title>dl_main (3 samples, 0.15%)</title><rect x="475.3" y="229" width="1.9" height="15.0" fill="rgb(236,46,17)" rx="2" ry="2" />
<text  x="478.28" y="239.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.05%)</title><rect x="280.7" y="229" width="0.7" height="15.0" fill="rgb(209,126,33)" rx="2" ry="2" />
<text  x="283.71" y="239.5" ></text>
</g>
<g >
<title>__rdl_realloc (4 samples, 0.20%)</title><rect x="247.5" y="213" width="2.6" height="15.0" fill="rgb(218,54,53)" rx="2" ry="2" />
<text  x="250.52" y="223.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.25%)</title><rect x="75.1" y="261" width="3.2" height="15.0" fill="rgb(213,10,15)" rx="2" ry="2" />
<text  x="78.07" y="271.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (51 samples, 2.59%)</title><rect x="640.6" y="245" width="33.2" height="15.0" fill="rgb(226,55,16)" rx="2" ry="2" />
<text  x="643.56" y="255.5" >al..</text>
</g>
<g >
<title>std::sys::unix::fs::try_statx (1 samples, 0.05%)</title><rect x="907.4" y="245" width="0.6" height="15.0" fill="rgb(245,220,47)" rx="2" ry="2" />
<text  x="910.37" y="255.5" ></text>
</g>
<g >
<title>_start (11 samples, 0.56%)</title><rect x="945.8" y="261" width="7.1" height="15.0" fill="rgb(212,226,54)" rx="2" ry="2" />
<text  x="948.76" y="271.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 0.92%)</title><rect x="163.6" y="149" width="11.7" height="15.0" fill="rgb(205,222,0)" rx="2" ry="2" />
<text  x="166.57" y="159.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (4 samples, 0.20%)</title><rect x="172.7" y="133" width="2.6" height="15.0" fill="rgb(252,59,0)" rx="2" ry="2" />
<text  x="175.68" y="143.5" ></text>
</g>
<g >
<title>[unknown] (1,219 samples, 61.97%)</title><rect x="114.8" y="261" width="793.2" height="15.0" fill="rgb(210,89,30)" rx="2" ry="2" />
<text  x="117.77" y="271.5" >[unknown]</text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (29 samples, 1.47%)</title><rect x="888.5" y="245" width="18.9" height="15.0" fill="rgb(249,81,26)" rx="2" ry="2" />
<text  x="891.50" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.10%)</title><rect x="1055.1" y="261" width="1.3" height="15.0" fill="rgb(237,87,29)" rx="2" ry="2" />
<text  x="1058.08" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.05%)</title><rect x="188.3" y="197" width="0.7" height="15.0" fill="rgb(230,14,40)" rx="2" ry="2" />
<text  x="191.30" y="207.5" ></text>
</g>
<g >
<title>malloc (149 samples, 7.57%)</title><rect x="1059.0" y="261" width="96.9" height="15.0" fill="rgb(215,128,0)" rx="2" ry="2" />
<text  x="1061.99" y="271.5" >malloc</text>
</g>
<g >
<title>mastermind::tree::answers_by_response (2 samples, 0.10%)</title><rect x="175.9" y="149" width="1.3" height="15.0" fill="rgb(251,83,5)" rx="2" ry="2" />
<text  x="178.94" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.41%)</title><rect x="11.3" y="261" width="5.2" height="15.0" fill="rgb(225,181,51)" rx="2" ry="2" />
<text  x="14.30" y="271.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.10%)</title><rect x="166.2" y="37" width="1.3" height="15.0" fill="rgb(237,207,17)" rx="2" ry="2" />
<text  x="169.18" y="47.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (87 samples, 4.42%)</title><rect x="813.0" y="245" width="56.6" height="15.0" fill="rgb(225,206,26)" rx="2" ry="2" />
<text  x="816.01" y="255.5" >maste..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.51%)</title><rect x="181.8" y="197" width="6.5" height="15.0" fill="rgb(244,214,38)" rx="2" ry="2" />
<text  x="184.79" y="207.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.31%)</title><rect x="133.6" y="229" width="3.9" height="15.0" fill="rgb(218,10,48)" rx="2" ry="2" />
<text  x="136.64" y="239.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.71%)</title><rect x="163.6" y="133" width="9.1" height="15.0" fill="rgb(223,110,44)" rx="2" ry="2" />
<text  x="166.57" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2 samples, 0.10%)</title><rect x="161.6" y="181" width="1.3" height="15.0" fill="rgb(220,152,39)" rx="2" ry="2" />
<text  x="164.62" y="191.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.41%)</title><rect x="164.2" y="101" width="5.2" height="15.0" fill="rgb(235,6,16)" rx="2" ry="2" />
<text  x="167.22" y="111.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (3 samples, 0.15%)</title><rect x="1056.4" y="261" width="1.9" height="15.0" fill="rgb(233,72,4)" rx="2" ry="2" />
<text  x="1059.39" y="271.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (18 samples, 0.92%)</title><rect x="1003.7" y="261" width="11.7" height="15.0" fill="rgb(248,199,2)" rx="2" ry="2" />
<text  x="1006.68" y="271.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.71%)</title><rect x="163.6" y="117" width="9.1" height="15.0" fill="rgb(224,65,37)" rx="2" ry="2" />
<text  x="166.57" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="163.6" y="101" width="0.6" height="15.0" fill="rgb(226,28,12)" rx="2" ry="2" />
<text  x="166.57" y="111.5" ></text>
</g>
<g >
<title>_dl_relocate_object (2 samples, 0.10%)</title><rect x="475.9" y="213" width="1.3" height="15.0" fill="rgb(208,132,47)" rx="2" ry="2" />
<text  x="478.93" y="223.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 1.42%)</title><rect x="161.6" y="197" width="18.2" height="15.0" fill="rgb(239,172,24)" rx="2" ry="2" />
<text  x="164.62" y="207.5" ></text>
</g>
<g >
<title>mastermind::code::compare (103 samples, 5.24%)</title><rect x="746.0" y="245" width="67.0" height="15.0" fill="rgb(244,22,10)" rx="2" ry="2" />
<text  x="748.98" y="255.5" >masterm..</text>
</g>
<g >
<title>[unknown] (69 samples, 3.51%)</title><rect x="161.6" y="213" width="44.9" height="15.0" fill="rgb(206,126,5)" rx="2" ry="2" />
<text  x="164.62" y="223.5" >[unk..</text>
</g>
<g >
<title>_int_free (116 samples, 5.90%)</title><rect x="477.2" y="245" width="75.5" height="15.0" fill="rgb(211,140,17)" rx="2" ry="2" />
<text  x="480.23" y="255.5" >_int_free</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="175.3" y="149" width="0.6" height="15.0" fill="rgb(228,71,47)" rx="2" ry="2" />
<text  x="178.29" y="159.5" ></text>
</g>
<g >
<title>__rust_realloc (1 samples, 0.05%)</title><rect x="168.8" y="53" width="0.6" height="15.0" fill="rgb(207,0,45)" rx="2" ry="2" />
<text  x="171.78" y="63.5" ></text>
</g>
<g >
<title>__rust_dealloc (2 samples, 0.10%)</title><rect x="925.6" y="261" width="1.3" height="15.0" fill="rgb(238,103,1)" rx="2" ry="2" />
<text  x="928.59" y="271.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.25%)</title><rect x="169.4" y="101" width="3.3" height="15.0" fill="rgb(223,205,7)" rx="2" ry="2" />
<text  x="172.43" y="111.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="162.9" y="165" width="0.7" height="15.0" fill="rgb(250,132,33)" rx="2" ry="2" />
<text  x="165.92" y="175.5" ></text>
</g>
<g >
<title>_int_realloc (3 samples, 0.15%)</title><rect x="254.0" y="213" width="2.0" height="15.0" fill="rgb(225,204,0)" rx="2" ry="2" />
<text  x="257.03" y="223.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (5 samples, 0.25%)</title><rect x="915.2" y="261" width="3.2" height="15.0" fill="rgb(242,105,18)" rx="2" ry="2" />
<text  x="918.18" y="271.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.15%)</title><rect x="112.8" y="261" width="2.0" height="15.0" fill="rgb(215,75,35)" rx="2" ry="2" />
<text  x="115.82" y="271.5" ></text>
</g>
</g>
</svg>
