<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1300" height="582" onload="init(evt)" viewBox="0 0 1300 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1300.0" height="582.0" fill="url(#background)"  />
<text id="title" x="650.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1190.00" y="24" >Search</text>
<text id="ignorecase" x="1274.00" y="24" >ic</text>
<text id="matched" x="1190.00" y="565" > </text>
<g id="frames">
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="261" width="2.9" height="15.0" fill="rgb(205,38,10)" rx="2" ry="2" />
<text  x="304.23" y="271.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 1.11%)</title><rect x="244.4" y="469" width="14.2" height="15.0" fill="rgb(205,135,22)" rx="2" ry="2" />
<text  x="247.41" y="479.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.11%)</title><rect x="436.2" y="469" width="1.4" height="15.0" fill="rgb(209,87,14)" rx="2" ry="2" />
<text  x="439.19" y="479.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (4 samples, 0.44%)</title><rect x="1109.6" y="501" width="5.7" height="15.0" fill="rgb(214,26,18)" rx="2" ry="2" />
<text  x="1112.58" y="511.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (1 samples, 0.11%)</title><rect x="1278.6" y="501" width="1.5" height="15.0" fill="rgb(240,133,43)" rx="2" ry="2" />
<text  x="1281.63" y="511.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (9 samples, 1.00%)</title><rect x="325.4" y="453" width="12.8" height="15.0" fill="rgb(219,79,4)" rx="2" ry="2" />
<text  x="328.38" y="463.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (15 samples, 1.66%)</title><rect x="62.6" y="485" width="21.3" height="15.0" fill="rgb(222,201,44)" rx="2" ry="2" />
<text  x="65.56" y="495.5" >&lt;..</text>
</g>
<g >
<title>__rust_dealloc (1 samples, 0.11%)</title><rect x="1022.9" y="501" width="1.4" height="15.0" fill="rgb(243,70,53)" rx="2" ry="2" />
<text  x="1025.92" y="511.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.33%)</title><rect x="221.7" y="469" width="4.2" height="15.0" fill="rgb(229,146,22)" rx="2" ry="2" />
<text  x="224.68" y="479.5" ></text>
</g>
<g >
<title>_int_free (6 samples, 0.67%)</title><rect x="1030.0" y="501" width="8.5" height="15.0" fill="rgb(210,76,28)" rx="2" ry="2" />
<text  x="1033.02" y="511.5" ></text>
</g>
<g >
<title>mastermind::code::compare (1 samples, 0.11%)</title><rect x="321.1" y="437" width="1.4" height="15.0" fill="rgb(218,144,50)" rx="2" ry="2" />
<text  x="324.12" y="447.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.89%)</title><rect x="88.1" y="485" width="11.4" height="15.0" fill="rgb(211,146,30)" rx="2" ry="2" />
<text  x="91.14" y="495.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 1.11%)</title><rect x="270.0" y="437" width="14.2" height="15.0" fill="rgb(245,166,24)" rx="2" ry="2" />
<text  x="272.98" y="447.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.11%)</title><rect x="1021.5" y="501" width="1.4" height="15.0" fill="rgb(207,215,36)" rx="2" ry="2" />
<text  x="1024.50" y="511.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (2 samples, 0.22%)</title><rect x="385.0" y="469" width="2.9" height="15.0" fill="rgb(215,197,24)" rx="2" ry="2" />
<text  x="388.05" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="117" width="1.5" height="15.0" fill="rgb(208,194,1)" rx="2" ry="2" />
<text  x="304.23" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4 samples, 0.44%)</title><rect x="261.5" y="453" width="5.6" height="15.0" fill="rgb(212,179,21)" rx="2" ry="2" />
<text  x="264.45" y="463.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7 samples, 0.78%)</title><rect x="1115.3" y="501" width="9.9" height="15.0" fill="rgb(249,212,40)" rx="2" ry="2" />
<text  x="1118.26" y="511.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::insert (15 samples, 1.66%)</title><rect x="1140.8" y="501" width="21.3" height="15.0" fill="rgb(220,2,42)" rx="2" ry="2" />
<text  x="1143.83" y="511.5" >h..</text>
</g>
<g >
<title>[unknown] (70 samples, 7.77%)</title><rect x="261.5" y="469" width="99.4" height="15.0" fill="rgb(223,182,16)" rx="2" ry="2" />
<text  x="264.45" y="479.5" >[unknown]</text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.33%)</title><rect x="58.3" y="501" width="4.3" height="15.0" fill="rgb(210,6,11)" rx="2" ry="2" />
<text  x="61.30" y="511.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.11%)</title><rect x="299.8" y="373" width="1.4" height="15.0" fill="rgb(219,120,19)" rx="2" ry="2" />
<text  x="302.81" y="383.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.11%)</title><rect x="267.1" y="453" width="1.5" height="15.0" fill="rgb(241,46,7)" rx="2" ry="2" />
<text  x="270.14" y="463.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (8 samples, 0.89%)</title><rect x="1072.6" y="501" width="11.4" height="15.0" fill="rgb(227,18,31)" rx="2" ry="2" />
<text  x="1075.64" y="511.5" ></text>
</g>
<g >
<title>[unknown] (11 samples, 1.22%)</title><rect x="292.7" y="421" width="15.6" height="15.0" fill="rgb(229,201,45)" rx="2" ry="2" />
<text  x="295.71" y="431.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="341" width="2.9" height="15.0" fill="rgb(235,56,35)" rx="2" ry="2" />
<text  x="304.23" y="351.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="133" width="1.5" height="15.0" fill="rgb(226,36,15)" rx="2" ry="2" />
<text  x="304.23" y="143.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.11%)</title><rect x="304.1" y="341" width="1.4" height="15.0" fill="rgb(249,177,32)" rx="2" ry="2" />
<text  x="307.07" y="351.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (3 samples, 0.33%)</title><rect x="1280.1" y="501" width="4.2" height="15.0" fill="rgb(218,25,14)" rx="2" ry="2" />
<text  x="1283.06" y="511.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.33%)</title><rect x="295.5" y="389" width="4.3" height="15.0" fill="rgb(234,110,38)" rx="2" ry="2" />
<text  x="298.55" y="399.5" ></text>
</g>
<g >
<title>test::bench::ns_iter_inner (1 samples, 0.11%)</title><rect x="1287.2" y="501" width="1.4" height="15.0" fill="rgb(247,94,8)" rx="2" ry="2" />
<text  x="1290.16" y="511.5" ></text>
</g>
<g >
<title>[unknown] (184 samples, 20.42%)</title><rect x="210.3" y="485" width="261.4" height="15.0" fill="rgb(219,22,45)" rx="2" ry="2" />
<text  x="213.31" y="495.5" >[unknown]</text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.22%)</title><rect x="55.5" y="501" width="2.8" height="15.0" fill="rgb(227,224,52)" rx="2" ry="2" />
<text  x="58.46" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="245" width="1.5" height="15.0" fill="rgb(242,226,50)" rx="2" ry="2" />
<text  x="304.23" y="255.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (1 samples, 0.11%)</title><rect x="1068.4" y="501" width="1.4" height="15.0" fill="rgb(211,198,2)" rx="2" ry="2" />
<text  x="1071.38" y="511.5" ></text>
</g>
<g >
<title>_int_realloc (2 samples, 0.22%)</title><rect x="341.0" y="453" width="2.9" height="15.0" fill="rgb(222,40,35)" rx="2" ry="2" />
<text  x="344.01" y="463.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (1 samples, 0.11%)</title><rect x="324.0" y="437" width="1.4" height="15.0" fill="rgb(207,71,46)" rx="2" ry="2" />
<text  x="326.96" y="447.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (60 samples, 6.66%)</title><rect x="125.1" y="485" width="85.2" height="15.0" fill="rgb(238,148,31)" rx="2" ry="2" />
<text  x="128.07" y="495.5" >&lt;std::coll..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (3 samples, 0.33%)</title><rect x="348.1" y="453" width="4.3" height="15.0" fill="rgb(205,79,52)" rx="2" ry="2" />
<text  x="351.11" y="463.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="277" width="2.9" height="15.0" fill="rgb(242,216,33)" rx="2" ry="2" />
<text  x="304.23" y="287.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.33%)</title><rect x="301.2" y="373" width="4.3" height="15.0" fill="rgb(228,16,23)" rx="2" ry="2" />
<text  x="304.23" y="383.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.11%)</title><rect x="309.8" y="421" width="1.4" height="15.0" fill="rgb(231,181,0)" rx="2" ry="2" />
<text  x="312.76" y="431.5" ></text>
</g>
<g >
<title>all (901 samples, 100%)</title><rect x="10.0" y="533" width="1280.0" height="15.0" fill="rgb(207,131,18)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (4 samples, 0.44%)</title><rect x="369.4" y="469" width="5.7" height="15.0" fill="rgb(207,226,29)" rx="2" ry="2" />
<text  x="372.42" y="479.5" ></text>
</g>
<g >
<title>check_match (1 samples, 0.11%)</title><rect x="1125.2" y="501" width="1.4" height="15.0" fill="rgb(253,9,10)" rx="2" ry="2" />
<text  x="1128.21" y="511.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (1 samples, 0.11%)</title><rect x="338.2" y="453" width="1.4" height="15.0" fill="rgb(213,170,13)" rx="2" ry="2" />
<text  x="341.17" y="463.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.33%)</title><rect x="288.4" y="421" width="4.3" height="15.0" fill="rgb(253,223,28)" rx="2" ry="2" />
<text  x="291.45" y="431.5" ></text>
</g>
<g >
<title>malloc (46 samples, 5.11%)</title><rect x="1197.7" y="501" width="65.3" height="15.0" fill="rgb(244,115,11)" rx="2" ry="2" />
<text  x="1200.66" y="511.5" >malloc</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.22%)</title><rect x="345.3" y="453" width="2.8" height="15.0" fill="rgb(214,38,43)" rx="2" ry="2" />
<text  x="348.27" y="463.5" ></text>
</g>
<g >
<title>malloc (6 samples, 0.67%)</title><rect x="897.9" y="485" width="8.5" height="15.0" fill="rgb(244,46,51)" rx="2" ry="2" />
<text  x="900.90" y="495.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (5 samples, 0.55%)</title><rect x="375.1" y="469" width="7.1" height="15.0" fill="rgb(232,194,29)" rx="2" ry="2" />
<text  x="378.11" y="479.5" ></text>
</g>
<g >
<title>mastermind::code::universe (1 samples, 0.11%)</title><rect x="1268.7" y="501" width="1.4" height="15.0" fill="rgb(253,176,54)" rx="2" ry="2" />
<text  x="1271.69" y="511.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (8 samples, 0.89%)</title><rect x="210.3" y="469" width="11.4" height="15.0" fill="rgb(211,162,23)" rx="2" ry="2" />
<text  x="213.31" y="479.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.33%)</title><rect x="301.2" y="357" width="4.3" height="15.0" fill="rgb(227,148,43)" rx="2" ry="2" />
<text  x="304.23" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="101" width="1.5" height="15.0" fill="rgb(216,221,36)" rx="2" ry="2" />
<text  x="304.23" y="111.5" ></text>
</g>
<g >
<title>dl_main (2 samples, 0.22%)</title><rect x="649.3" y="469" width="2.8" height="15.0" fill="rgb(216,100,45)" rx="2" ry="2" />
<text  x="652.29" y="479.5" ></text>
</g>
<g >
<title>_int_free (45 samples, 4.99%)</title><rect x="652.1" y="485" width="64.0" height="15.0" fill="rgb(232,220,22)" rx="2" ry="2" />
<text  x="655.13" y="495.5" >_int_free</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.55%)</title><rect x="314.0" y="437" width="7.1" height="15.0" fill="rgb(236,21,27)" rx="2" ry="2" />
<text  x="317.02" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="85" width="1.5" height="15.0" fill="rgb(206,24,38)" rx="2" ry="2" />
<text  x="304.23" y="95.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 0.11%)</title><rect x="1027.2" y="485" width="1.4" height="15.0" fill="rgb(212,167,4)" rx="2" ry="2" />
<text  x="1030.18" y="495.5" ></text>
</g>
<g >
<title>mastermind::tree::morphology::IsomorphCache::is_new_morph (14 samples, 1.55%)</title><rect x="450.4" y="469" width="19.9" height="15.0" fill="rgb(218,161,6)" rx="2" ry="2" />
<text  x="453.40" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 1.22%)</title><rect x="1038.5" y="501" width="15.7" height="15.0" fill="rgb(207,14,48)" rx="2" ry="2" />
<text  x="1041.55" y="511.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.67%)</title><rect x="870.9" y="485" width="8.5" height="15.0" fill="rgb(213,215,13)" rx="2" ry="2" />
<text  x="873.91" y="495.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (20 samples, 2.22%)</title><rect x="816.9" y="485" width="28.4" height="15.0" fill="rgb(245,68,4)" rx="2" ry="2" />
<text  x="819.93" y="495.5" >al..</text>
</g>
<g >
<title>_dl_cache_libcmp (1 samples, 0.11%)</title><rect x="1028.6" y="485" width="1.4" height="15.0" fill="rgb(250,103,7)" rx="2" ry="2" />
<text  x="1031.60" y="495.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.11%)</title><rect x="301.2" y="37" width="1.5" height="15.0" fill="rgb(206,95,9)" rx="2" ry="2" />
<text  x="304.23" y="47.5" ></text>
</g>
<g >
<title>strcmp (1 samples, 0.11%)</title><rect x="1285.7" y="501" width="1.5" height="15.0" fill="rgb(248,31,18)" rx="2" ry="2" />
<text  x="1288.74" y="511.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (1 samples, 0.11%)</title><rect x="322.5" y="437" width="1.5" height="15.0" fill="rgb(250,35,38)" rx="2" ry="2" />
<text  x="325.54" y="447.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.22%)</title><rect x="284.2" y="437" width="2.8" height="15.0" fill="rgb(250,91,21)" rx="2" ry="2" />
<text  x="287.18" y="447.5" ></text>
</g>
<g >
<title>__rust_alloc (3 samples, 0.33%)</title><rect x="640.8" y="485" width="4.2" height="15.0" fill="rgb(242,29,25)" rx="2" ry="2" />
<text  x="643.77" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.11%)</title><rect x="312.6" y="437" width="1.4" height="15.0" fill="rgb(210,207,46)" rx="2" ry="2" />
<text  x="315.60" y="447.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (1 samples, 0.11%)</title><rect x="434.8" y="469" width="1.4" height="15.0" fill="rgb(208,46,1)" rx="2" ry="2" />
<text  x="437.77" y="479.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="305.5" y="373" width="1.4" height="15.0" fill="rgb(215,26,2)" rx="2" ry="2" />
<text  x="308.49" y="383.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3 samples, 0.33%)</title><rect x="647.9" y="485" width="4.2" height="15.0" fill="rgb(246,192,20)" rx="2" ry="2" />
<text  x="650.87" y="495.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="293" width="2.9" height="15.0" fill="rgb(217,226,11)" rx="2" ry="2" />
<text  x="304.23" y="303.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.89%)</title><rect x="295.5" y="405" width="11.4" height="15.0" fill="rgb(217,0,50)" rx="2" ry="2" />
<text  x="298.55" y="415.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="181" width="1.5" height="15.0" fill="rgb(238,207,44)" rx="2" ry="2" />
<text  x="304.23" y="191.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="165" width="1.5" height="15.0" fill="rgb(212,33,13)" rx="2" ry="2" />
<text  x="304.23" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.11%)</title><rect x="1196.2" y="501" width="1.5" height="15.0" fill="rgb(228,137,10)" rx="2" ry="2" />
<text  x="1199.24" y="511.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (83 samples, 9.21%)</title><rect x="471.7" y="485" width="117.9" height="15.0" fill="rgb(231,99,50)" rx="2" ry="2" />
<text  x="474.71" y="495.5" >__memmove_sse2..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 1.22%)</title><rect x="419.1" y="469" width="15.7" height="15.0" fill="rgb(243,38,53)" rx="2" ry="2" />
<text  x="422.15" y="479.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.11%)</title><rect x="343.9" y="453" width="1.4" height="15.0" fill="rgb(222,21,23)" rx="2" ry="2" />
<text  x="346.85" y="463.5" ></text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.11%)</title><rect x="639.3" y="485" width="1.5" height="15.0" fill="rgb(213,214,35)" rx="2" ry="2" />
<text  x="642.35" y="495.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (19 samples, 2.11%)</title><rect x="950.5" y="485" width="27.0" height="15.0" fill="rgb(237,6,6)" rx="2" ry="2" />
<text  x="953.47" y="495.5" >m..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="309" width="2.9" height="15.0" fill="rgb(240,65,22)" rx="2" ry="2" />
<text  x="304.23" y="319.5" ></text>
</g>
<g >
<title>hashbrown::raw::capacity_to_buckets (2 samples, 0.22%)</title><rect x="352.4" y="453" width="2.8" height="15.0" fill="rgb(223,180,5)" rx="2" ry="2" />
<text  x="355.38" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.11%)</title><rect x="716.1" y="485" width="1.4" height="15.0" fill="rgb(237,69,47)" rx="2" ry="2" />
<text  x="719.06" y="495.5" ></text>
</g>
<g >
<title>__GI___close_nocancel (1 samples, 0.11%)</title><rect x="1025.8" y="485" width="1.4" height="15.0" fill="rgb(240,95,7)" rx="2" ry="2" />
<text  x="1028.76" y="495.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (5 samples, 0.55%)</title><rect x="1000.2" y="501" width="7.1" height="15.0" fill="rgb(221,32,11)" rx="2" ry="2" />
<text  x="1003.19" y="511.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.11%)</title><rect x="392.2" y="469" width="1.4" height="15.0" fill="rgb(237,176,9)" rx="2" ry="2" />
<text  x="395.15" y="479.5" ></text>
</g>
<g >
<title>mastermind::code::compare (31 samples, 3.44%)</title><rect x="906.4" y="485" width="44.1" height="15.0" fill="rgb(227,42,46)" rx="2" ry="2" />
<text  x="909.43" y="495.5" >mast..</text>
</g>
<g >
<title>mastermind::code::compare (4 samples, 0.44%)</title><rect x="1263.0" y="501" width="5.7" height="15.0" fill="rgb(211,196,15)" rx="2" ry="2" />
<text  x="1266.01" y="511.5" ></text>
</g>
<g >
<title>mastermind-f32d (901 samples, 100.00%)</title><rect x="10.0" y="517" width="1280.0" height="15.0" fill="rgb(207,51,11)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >mastermind-f32d</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.44%)</title><rect x="1133.7" y="501" width="5.7" height="15.0" fill="rgb(211,22,11)" rx="2" ry="2" />
<text  x="1136.73" y="511.5" ></text>
</g>
<g >
<title>mastermind::tree::RefTree::to_tree (1 samples, 0.11%)</title><rect x="1270.1" y="501" width="1.4" height="15.0" fill="rgb(207,138,48)" rx="2" ry="2" />
<text  x="1273.11" y="511.5" ></text>
</g>
<g >
<title>_dl_map_object (3 samples, 0.33%)</title><rect x="1025.8" y="501" width="4.2" height="15.0" fill="rgb(209,227,8)" rx="2" ry="2" />
<text  x="1028.76" y="511.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.11%)</title><rect x="311.2" y="437" width="1.4" height="15.0" fill="rgb(205,156,39)" rx="2" ry="2" />
<text  x="314.18" y="447.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.11%)</title><rect x="268.6" y="453" width="1.4" height="15.0" fill="rgb(232,182,15)" rx="2" ry="2" />
<text  x="271.56" y="463.5" ></text>
</g>
<g >
<title>[unknown] (39 samples, 4.33%)</title><rect x="270.0" y="453" width="55.4" height="15.0" fill="rgb(235,34,13)" rx="2" ry="2" />
<text  x="272.98" y="463.5" >[unkn..</text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.11%)</title><rect x="812.7" y="485" width="1.4" height="15.0" fill="rgb(222,128,49)" rx="2" ry="2" />
<text  x="815.66" y="495.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="99.5" y="485" width="1.4" height="15.0" fill="rgb(206,59,12)" rx="2" ry="2" />
<text  x="102.50" y="495.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (5 samples, 0.55%)</title><rect x="1271.5" y="501" width="7.1" height="15.0" fill="rgb(212,205,37)" rx="2" ry="2" />
<text  x="1274.53" y="511.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="287.0" y="421" width="1.4" height="15.0" fill="rgb(206,102,17)" rx="2" ry="2" />
<text  x="290.03" y="431.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="53" width="1.5" height="15.0" fill="rgb(232,185,38)" rx="2" ry="2" />
<text  x="304.23" y="63.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.55%)</title><rect x="299.8" y="389" width="7.1" height="15.0" fill="rgb(239,33,31)" rx="2" ry="2" />
<text  x="302.81" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.33%)</title><rect x="387.9" y="469" width="4.3" height="15.0" fill="rgb(234,222,34)" rx="2" ry="2" />
<text  x="390.89" y="479.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.22%)</title><rect x="382.2" y="469" width="2.8" height="15.0" fill="rgb(212,197,2)" rx="2" ry="2" />
<text  x="385.21" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="69" width="1.5" height="15.0" fill="rgb(252,26,10)" rx="2" ry="2" />
<text  x="304.23" y="79.5" ></text>
</g>
<g >
<title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.11%)</title><rect x="470.3" y="469" width="1.4" height="15.0" fill="rgb(250,180,50)" rx="2" ry="2" />
<text  x="473.29" y="479.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.67%)</title><rect x="225.9" y="469" width="8.6" height="15.0" fill="rgb(250,40,7)" rx="2" ry="2" />
<text  x="228.94" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="213" width="1.5" height="15.0" fill="rgb(208,152,0)" rx="2" ry="2" />
<text  x="304.23" y="223.5" ></text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.11%)</title><rect x="1020.1" y="501" width="1.4" height="15.0" fill="rgb(237,200,32)" rx="2" ry="2" />
<text  x="1023.08" y="511.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (5 samples, 0.55%)</title><rect x="993.1" y="485" width="7.1" height="15.0" fill="rgb(234,224,7)" rx="2" ry="2" />
<text  x="996.09" y="495.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 1.89%)</title><rect x="287.0" y="437" width="24.2" height="15.0" fill="rgb(238,111,22)" rx="2" ry="2" />
<text  x="290.03" y="447.5" >[..</text>
</g>
<g >
<title>_int_free (1 samples, 0.11%)</title><rect x="302.7" y="245" width="1.4" height="15.0" fill="rgb(242,71,30)" rx="2" ry="2" />
<text  x="305.65" y="255.5" ></text>
</g>
<g >
<title>realloc (4 samples, 0.44%)</title><rect x="355.2" y="453" width="5.7" height="15.0" fill="rgb(251,229,27)" rx="2" ry="2" />
<text  x="358.22" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="149" width="1.5" height="15.0" fill="rgb(223,93,21)" rx="2" ry="2" />
<text  x="304.23" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.33%)</title><rect x="83.9" y="485" width="4.2" height="15.0" fill="rgb(214,196,13)" rx="2" ry="2" />
<text  x="86.87" y="495.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (24 samples, 2.66%)</title><rect x="1162.1" y="501" width="34.1" height="15.0" fill="rgb(227,4,43)" rx="2" ry="2" />
<text  x="1165.14" y="511.5" >ha..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.11%)</title><rect x="308.3" y="421" width="1.5" height="15.0" fill="rgb(227,152,47)" rx="2" ry="2" />
<text  x="311.34" y="431.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.55%)</title><rect x="362.3" y="469" width="7.1" height="15.0" fill="rgb(239,218,15)" rx="2" ry="2" />
<text  x="365.32" y="479.5" ></text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.11%)</title><rect x="339.6" y="453" width="1.4" height="15.0" fill="rgb(237,179,3)" rx="2" ry="2" />
<text  x="342.59" y="463.5" ></text>
</g>
<g >
<title>_start (10 samples, 1.11%)</title><rect x="1054.2" y="501" width="14.2" height="15.0" fill="rgb(219,61,2)" rx="2" ry="2" />
<text  x="1057.17" y="511.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (5 samples, 0.55%)</title><rect x="589.6" y="485" width="7.1" height="15.0" fill="rgb(215,98,43)" rx="2" ry="2" />
<text  x="592.62" y="495.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (1 samples, 0.11%)</title><rect x="1139.4" y="501" width="1.4" height="15.0" fill="rgb(236,147,41)" rx="2" ry="2" />
<text  x="1142.41" y="511.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.67%)</title><rect x="11.4" y="501" width="8.5" height="15.0" fill="rgb(237,62,49)" rx="2" ry="2" />
<text  x="14.42" y="511.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (2 samples, 0.22%)</title><rect x="1017.2" y="501" width="2.9" height="15.0" fill="rgb(215,119,5)" rx="2" ry="2" />
<text  x="1020.24" y="511.5" ></text>
</g>
<g >
<title>__rust_dealloc (2 samples, 0.22%)</title><rect x="645.0" y="485" width="2.9" height="15.0" fill="rgb(245,77,19)" rx="2" ry="2" />
<text  x="648.03" y="495.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (25 samples, 2.77%)</title><rect x="596.7" y="485" width="35.5" height="15.0" fill="rgb(228,11,49)" rx="2" ry="2" />
<text  x="599.73" y="495.5" >__m..</text>
</g>
<g >
<title>mastermind::tree::generate_exhaustively (1 samples, 0.11%)</title><rect x="977.5" y="485" width="1.4" height="15.0" fill="rgb(249,185,53)" rx="2" ry="2" />
<text  x="980.46" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="197" width="1.5" height="15.0" fill="rgb(251,1,43)" rx="2" ry="2" />
<text  x="304.23" y="207.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12 samples, 1.33%)</title><rect x="879.4" y="485" width="17.1" height="15.0" fill="rgb(230,161,25)" rx="2" ry="2" />
<text  x="882.43" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.11%)</title><rect x="301.2" y="229" width="1.5" height="15.0" fill="rgb(223,0,43)" rx="2" ry="2" />
<text  x="304.23" y="239.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (13 samples, 1.44%)</title><rect x="794.2" y="485" width="18.5" height="15.0" fill="rgb(248,148,28)" rx="2" ry="2" />
<text  x="797.20" y="495.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.22%)</title><rect x="301.2" y="325" width="2.9" height="15.0" fill="rgb(207,109,35)" rx="2" ry="2" />
<text  x="304.23" y="335.5" ></text>
</g>
<g >
<title>__rdl_alloc (1 samples, 0.11%)</title><rect x="360.9" y="469" width="1.4" height="15.0" fill="rgb(246,123,42)" rx="2" ry="2" />
<text  x="363.90" y="479.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.22%)</title><rect x="1069.8" y="501" width="2.8" height="15.0" fill="rgb(232,108,42)" rx="2" ry="2" />
<text  x="1072.80" y="511.5" ></text>
</g>
<g >
<title>_dl_addr (1 samples, 0.11%)</title><rect x="1024.3" y="501" width="1.5" height="15.0" fill="rgb(221,95,19)" rx="2" ry="2" />
<text  x="1027.34" y="511.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.11%)</title><rect x="896.5" y="485" width="1.4" height="15.0" fill="rgb(211,64,5)" rx="2" ry="2" />
<text  x="899.48" y="495.5" ></text>
</g>
<g >
<title>core::str::pattern::StrSearcher::new (1 samples, 0.11%)</title><rect x="1126.6" y="501" width="1.4" height="15.0" fill="rgb(249,180,13)" rx="2" ry="2" />
<text  x="1129.63" y="511.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (10 samples, 1.11%)</title><rect x="978.9" y="485" width="14.2" height="15.0" fill="rgb(227,61,21)" rx="2" ry="2" />
<text  x="981.88" y="495.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 1.89%)</title><rect x="100.9" y="485" width="24.2" height="15.0" fill="rgb(225,50,10)" rx="2" ry="2" />
<text  x="103.92" y="495.5" >&lt;..</text>
</g>
<g >
<title>mastermind::tree::generate (1 samples, 0.11%)</title><rect x="306.9" y="405" width="1.4" height="15.0" fill="rgb(224,159,36)" rx="2" ry="2" />
<text  x="309.91" y="415.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.22%)</title><rect x="292.7" y="405" width="2.8" height="15.0" fill="rgb(253,22,22)" rx="2" ry="2" />
<text  x="295.71" y="415.5" ></text>
</g>
<g >
<title>mmap64 (1 samples, 0.11%)</title><rect x="1284.3" y="501" width="1.4" height="15.0" fill="rgb(224,57,3)" rx="2" ry="2" />
<text  x="1287.32" y="511.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.22%)</title><rect x="258.6" y="469" width="2.9" height="15.0" fill="rgb(240,93,48)" rx="2" ry="2" />
<text  x="261.61" y="479.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (7 samples, 0.78%)</title><rect x="1007.3" y="501" width="9.9" height="15.0" fill="rgb(229,175,13)" rx="2" ry="2" />
<text  x="1010.29" y="511.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 0.11%)</title><rect x="650.7" y="453" width="1.4" height="15.0" fill="rgb(248,197,44)" rx="2" ry="2" />
<text  x="653.71" y="463.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (2 samples, 0.22%)</title><rect x="437.6" y="469" width="2.9" height="15.0" fill="rgb(209,28,3)" rx="2" ry="2" />
<text  x="440.61" y="479.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.78%)</title><rect x="234.5" y="469" width="9.9" height="15.0" fill="rgb(252,133,19)" rx="2" ry="2" />
<text  x="237.46" y="479.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 2.77%)</title><rect x="19.9" y="501" width="35.6" height="15.0" fill="rgb(219,124,48)" rx="2" ry="2" />
<text  x="22.94" y="511.5" >&lt;al..</text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (18 samples, 2.00%)</title><rect x="845.3" y="485" width="25.6" height="15.0" fill="rgb(228,136,19)" rx="2" ry="2" />
<text  x="848.34" y="495.5" >a..</text>
</g>
<g >
<title>mastermind::tree::generate_children (7 samples, 0.78%)</title><rect x="440.5" y="469" width="9.9" height="15.0" fill="rgb(222,36,4)" rx="2" ry="2" />
<text  x="443.46" y="479.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (54 samples, 5.99%)</title><rect x="717.5" y="485" width="76.7" height="15.0" fill="rgb(230,155,33)" rx="2" ry="2" />
<text  x="720.48" y="495.5" >alloc::c..</text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (18 samples, 2.00%)</title><rect x="1084.0" y="501" width="25.6" height="15.0" fill="rgb(222,180,32)" rx="2" ry="2" />
<text  x="1087.01" y="511.5" >a..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (4 samples, 0.44%)</title><rect x="1128.0" y="501" width="5.7" height="15.0" fill="rgb(254,38,44)" rx="2" ry="2" />
<text  x="1131.05" y="511.5" ></text>
</g>
<g >
<title>test::stats::local_sort (1 samples, 0.11%)</title><rect x="1288.6" y="501" width="1.4" height="15.0" fill="rgb(240,162,12)" rx="2" ry="2" />
<text  x="1291.58" y="511.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (2 samples, 0.22%)</title><rect x="814.1" y="485" width="2.8" height="15.0" fill="rgb(251,91,38)" rx="2" ry="2" />
<text  x="817.08" y="495.5" ></text>
</g>
<g >
<title>[unknown] (660 samples, 73.25%)</title><rect x="62.6" y="501" width="937.6" height="15.0" fill="rgb(211,143,34)" rx="2" ry="2" />
<text  x="65.56" y="511.5" >[unknown]</text>
</g>
<g >
<title>__rdl_alloc (5 samples, 0.55%)</title><rect x="632.2" y="485" width="7.1" height="15.0" fill="rgb(230,51,22)" rx="2" ry="2" />
<text  x="635.24" y="495.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (18 samples, 2.00%)</title><rect x="393.6" y="469" width="25.5" height="15.0" fill="rgb(214,16,27)" rx="2" ry="2" />
<text  x="396.57" y="479.5" >h..</text>
</g>
</g>
</svg>
