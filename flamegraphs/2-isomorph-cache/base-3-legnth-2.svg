<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1300" height="246" onload="init(evt)" viewBox="0 0 1300 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1300.0" height="246.0" fill="url(#background)"  />
<text id="title" x="650.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="229" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1190.00" y="24" >Search</text>
<text id="ignorecase" x="1274.00" y="24" >ic</text>
<text id="matched" x="1190.00" y="229" > </text>
<g id="frames">
<g >
<title>[unknown] (4 samples, 0.05%)</title><rect x="301.6" y="53" width="0.7" height="15.0" fill="rgb(222,18,41)" rx="2" ry="2" />
<text  x="304.63" y="63.5" ></text>
</g>
<g >
<title>__GI___tunables_init (1 samples, 0.01%)</title><rect x="1022.8" y="165" width="0.2" height="15.0" fill="rgb(237,12,33)" rx="2" ry="2" />
<text  x="1025.79" y="175.5" ></text>
</g>
<g >
<title>__GI___read_nocancel (1 samples, 0.01%)</title><rect x="1039.4" y="149" width="0.2" height="15.0" fill="rgb(223,203,2)" rx="2" ry="2" />
<text  x="1042.40" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (96 samples, 1.20%)</title><rect x="230.8" y="133" width="15.3" height="15.0" fill="rgb(213,134,22)" rx="2" ry="2" />
<text  x="233.76" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (53 samples, 0.66%)</title><rect x="1051.5" y="165" width="8.5" height="15.0" fill="rgb(208,25,20)" rx="2" ry="2" />
<text  x="1054.53" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.10%)</title><rect x="307.2" y="101" width="1.3" height="15.0" fill="rgb(220,58,37)" rx="2" ry="2" />
<text  x="310.21" y="111.5" ></text>
</g>
<g >
<title>__rust_dealloc (10 samples, 0.12%)</title><rect x="1037.6" y="165" width="1.6" height="15.0" fill="rgb(240,215,6)" rx="2" ry="2" />
<text  x="1040.64" y="175.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (3 samples, 0.04%)</title><rect x="502.0" y="149" width="0.4" height="15.0" fill="rgb(253,179,25)" rx="2" ry="2" />
<text  x="504.95" y="159.5" ></text>
</g>
<g >
<title>__rust_realloc (1 samples, 0.01%)</title><rect x="337.9" y="117" width="0.1" height="15.0" fill="rgb(239,78,17)" rx="2" ry="2" />
<text  x="340.86" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (231 samples, 2.88%)</title><rect x="1162.6" y="165" width="36.9" height="15.0" fill="rgb(207,76,44)" rx="2" ry="2" />
<text  x="1165.62" y="175.5" >has..</text>
</g>
<g >
<title>_dl_start_user (1 samples, 0.01%)</title><rect x="1040.2" y="165" width="0.2" height="15.0" fill="rgb(242,139,48)" rx="2" ry="2" />
<text  x="1043.19" y="175.5" ></text>
</g>
<g >
<title>__rdl_dealloc (6 samples, 0.07%)</title><rect x="1036.2" y="165" width="1.0" height="15.0" fill="rgb(234,159,20)" rx="2" ry="2" />
<text  x="1039.20" y="175.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.82%)</title><rect x="273.4" y="117" width="10.5" height="15.0" fill="rgb(213,29,10)" rx="2" ry="2" />
<text  x="276.37" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.16%)</title><rect x="754.5" y="149" width="2.0" height="15.0" fill="rgb(242,149,5)" rx="2" ry="2" />
<text  x="757.47" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.59%)</title><rect x="285.7" y="101" width="7.5" height="15.0" fill="rgb(223,74,11)" rx="2" ry="2" />
<text  x="288.67" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_sigaction (1 samples, 0.01%)</title><rect x="1022.6" y="165" width="0.2" height="15.0" fill="rgb(212,10,41)" rx="2" ry="2" />
<text  x="1025.63" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::bucket_mask_to_capacity (9 samples, 0.11%)</title><rect x="351.1" y="117" width="1.4" height="15.0" fill="rgb(216,146,13)" rx="2" ry="2" />
<text  x="354.11" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="302.9" y="85" width="0.3" height="15.0" fill="rgb(238,147,29)" rx="2" ry="2" />
<text  x="305.90" y="95.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="298.8" y="85" width="0.3" height="15.0" fill="rgb(235,2,53)" rx="2" ry="2" />
<text  x="301.75" y="95.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="300.4" y="69" width="0.3" height="15.0" fill="rgb(247,21,53)" rx="2" ry="2" />
<text  x="303.35" y="79.5" ></text>
</g>
<g >
<title>__rdl_alloc (7 samples, 0.09%)</title><rect x="1035.1" y="165" width="1.1" height="15.0" fill="rgb(213,227,36)" rx="2" ry="2" />
<text  x="1038.09" y="175.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (7 samples, 0.09%)</title><rect x="461.4" y="133" width="1.1" height="15.0" fill="rgb(227,31,2)" rx="2" ry="2" />
<text  x="464.41" y="143.5" ></text>
</g>
<g >
<title>_int_realloc (2 samples, 0.02%)</title><rect x="369.8" y="133" width="0.3" height="15.0" fill="rgb(254,166,50)" rx="2" ry="2" />
<text  x="372.79" y="143.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (1 samples, 0.01%)</title><rect x="334.7" y="117" width="0.1" height="15.0" fill="rgb(207,134,38)" rx="2" ry="2" />
<text  x="337.67" y="127.5" ></text>
</g>
<g >
<title>__rdl_realloc (7 samples, 0.09%)</title><rect x="336.4" y="117" width="1.1" height="15.0" fill="rgb(227,190,40)" rx="2" ry="2" />
<text  x="339.42" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.12%)</title><rect x="10.0" y="165" width="1.6" height="15.0" fill="rgb(221,173,32)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>mastermind::code::compare (300 samples, 3.74%)</title><rect x="922.9" y="149" width="47.9" height="15.0" fill="rgb(227,175,21)" rx="2" ry="2" />
<text  x="925.87" y="159.5" >mast..</text>
</g>
<g >
<title>__rdl_realloc (1 samples, 0.01%)</title><rect x="303.2" y="101" width="0.2" height="15.0" fill="rgb(239,142,2)" rx="2" ry="2" />
<text  x="306.22" y="111.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (12 samples, 0.15%)</title><rect x="1061.6" y="165" width="1.9" height="15.0" fill="rgb(254,88,22)" rx="2" ry="2" />
<text  x="1064.58" y="175.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7 samples, 0.09%)</title><rect x="389.4" y="133" width="1.1" height="15.0" fill="rgb(240,165,6)" rx="2" ry="2" />
<text  x="392.42" y="143.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (14 samples, 0.17%)</title><rect x="827.1" y="149" width="2.2" height="15.0" fill="rgb(215,195,53)" rx="2" ry="2" />
<text  x="830.10" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::insert (134 samples, 1.67%)</title><rect x="1141.2" y="165" width="21.4" height="15.0" fill="rgb(216,125,11)" rx="2" ry="2" />
<text  x="1144.23" y="175.5" >h..</text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (12 samples, 0.15%)</title><rect x="1033.2" y="165" width="1.9" height="15.0" fill="rgb(246,99,13)" rx="2" ry="2" />
<text  x="1036.17" y="175.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.02%)</title><rect x="302.6" y="85" width="0.3" height="15.0" fill="rgb(221,161,22)" rx="2" ry="2" />
<text  x="305.59" y="95.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (1 samples, 0.01%)</title><rect x="1039.7" y="149" width="0.2" height="15.0" fill="rgb(241,109,33)" rx="2" ry="2" />
<text  x="1042.71" y="159.5" ></text>
</g>
<g >
<title>realloc (36 samples, 0.45%)</title><rect x="356.5" y="117" width="5.8" height="15.0" fill="rgb(246,108,14)" rx="2" ry="2" />
<text  x="359.54" y="127.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.04%)</title><rect x="354.0" y="117" width="0.5" height="15.0" fill="rgb(234,60,50)" rx="2" ry="2" />
<text  x="356.98" y="127.5" ></text>
</g>
<g >
<title>_dl_map_object (5 samples, 0.06%)</title><rect x="1039.4" y="165" width="0.8" height="15.0" fill="rgb(237,76,18)" rx="2" ry="2" />
<text  x="1042.40" y="175.5" ></text>
</g>
<g >
<title>[unknown] (243 samples, 3.03%)</title><rect x="283.9" y="117" width="38.8" height="15.0" fill="rgb(222,177,47)" rx="2" ry="2" />
<text  x="286.91" y="127.5" >[un..</text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.07%)</title><rect x="300.7" y="69" width="0.9" height="15.0" fill="rgb(217,183,25)" rx="2" ry="2" />
<text  x="303.67" y="79.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (20 samples, 0.25%)</title><rect x="1030.0" y="165" width="3.2" height="15.0" fill="rgb(222,179,30)" rx="2" ry="2" />
<text  x="1032.98" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (76 samples, 0.95%)</title><rect x="829.3" y="149" width="12.2" height="15.0" fill="rgb(253,21,23)" rx="2" ry="2" />
<text  x="832.33" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (34 samples, 0.42%)</title><rect x="293.2" y="101" width="5.4" height="15.0" fill="rgb(220,67,2)" rx="2" ry="2" />
<text  x="296.17" y="111.5" ></text>
</g>
<g >
<title>mastermind::tree::morphology::IsomorphCache::is_new_morph (141 samples, 1.76%)</title><rect x="479.3" y="133" width="22.5" height="15.0" fill="rgb(238,218,23)" rx="2" ry="2" />
<text  x="482.29" y="143.5" >m..</text>
</g>
<g >
<title>[unknown] (1,797 samples, 22.41%)</title><rect x="215.1" y="149" width="286.9" height="15.0" fill="rgb(219,109,52)" rx="2" ry="2" />
<text  x="218.11" y="159.5" >[unknown]</text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (14 samples, 0.17%)</title><rect x="1284.7" y="165" width="2.3" height="15.0" fill="rgb(221,155,2)" rx="2" ry="2" />
<text  x="1287.73" y="175.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (44 samples, 0.55%)</title><rect x="1023.0" y="165" width="7.0" height="15.0" fill="rgb(250,10,35)" rx="2" ry="2" />
<text  x="1025.95" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (20 samples, 0.25%)</title><rect x="347.9" y="117" width="3.2" height="15.0" fill="rgb(224,198,46)" rx="2" ry="2" />
<text  x="350.92" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (13 samples, 0.16%)</title><rect x="11.6" y="165" width="2.1" height="15.0" fill="rgb(253,133,7)" rx="2" ry="2" />
<text  x="14.60" y="175.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (18 samples, 0.22%)</title><rect x="318.5" y="101" width="2.9" height="15.0" fill="rgb(206,158,3)" rx="2" ry="2" />
<text  x="321.55" y="111.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (139 samples, 1.73%)</title><rect x="1084.9" y="165" width="22.2" height="15.0" fill="rgb(249,226,46)" rx="2" ry="2" />
<text  x="1087.89" y="175.5" >a..</text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (617 samples, 7.69%)</title><rect x="116.5" y="149" width="98.5" height="15.0" fill="rgb(226,223,51)" rx="2" ry="2" />
<text  x="119.47" y="159.5" >&lt;std::colle..</text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.01%)</title><rect x="381.0" y="133" width="0.1" height="15.0" fill="rgb(238,90,27)" rx="2" ry="2" />
<text  x="383.96" y="143.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (20 samples, 0.25%)</title><rect x="370.1" y="133" width="3.2" height="15.0" fill="rgb(219,90,1)" rx="2" ry="2" />
<text  x="373.10" y="143.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (100 samples, 1.25%)</title><rect x="1006.5" y="149" width="16.0" height="15.0" fill="rgb(218,39,37)" rx="2" ry="2" />
<text  x="1009.51" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.14%)</title><rect x="342.5" y="117" width="1.7" height="15.0" fill="rgb(219,95,6)" rx="2" ry="2" />
<text  x="345.49" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (295 samples, 3.68%)</title><rect x="13.7" y="165" width="47.1" height="15.0" fill="rgb(215,128,18)" rx="2" ry="2" />
<text  x="16.67" y="175.5" >&lt;all..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="302.3" y="53" width="0.3" height="15.0" fill="rgb(226,11,42)" rx="2" ry="2" />
<text  x="305.27" y="63.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (45 samples, 0.56%)</title><rect x="1277.5" y="165" width="7.2" height="15.0" fill="rgb(252,174,26)" rx="2" ry="2" />
<text  x="1280.55" y="175.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.36%)</title><rect x="298.6" y="101" width="4.6" height="15.0" fill="rgb(217,208,3)" rx="2" ry="2" />
<text  x="301.59" y="111.5" ></text>
</g>
<g >
<title>_start (10 samples, 0.12%)</title><rect x="1060.0" y="165" width="1.6" height="15.0" fill="rgb(218,34,50)" rx="2" ry="2" />
<text  x="1062.99" y="175.5" ></text>
</g>
<g >
<title>_int_free (69 samples, 0.86%)</title><rect x="1040.5" y="165" width="11.0" height="15.0" fill="rgb(224,49,5)" rx="2" ry="2" />
<text  x="1043.51" y="175.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (11 samples, 0.14%)</title><rect x="354.8" y="117" width="1.7" height="15.0" fill="rgb(230,46,7)" rx="2" ry="2" />
<text  x="357.78" y="127.5" ></text>
</g>
<g >
<title>std::collections::hash::map::RandomState::new::KEYS::__getit (7 samples, 0.09%)</title><rect x="321.6" y="101" width="1.1" height="15.0" fill="rgb(249,95,50)" rx="2" ry="2" />
<text  x="324.58" y="111.5" ></text>
</g>
<g >
<title>_int_free (433 samples, 5.40%)</title><rect x="685.4" y="149" width="69.1" height="15.0" fill="rgb(254,139,46)" rx="2" ry="2" />
<text  x="688.36" y="159.5" >_int_free</text>
</g>
<g >
<title>[libc-2.29.so] (1 samples, 0.01%)</title><rect x="215.0" y="149" width="0.1" height="15.0" fill="rgb(221,216,3)" rx="2" ry="2" />
<text  x="217.95" y="159.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (312 samples, 3.89%)</title><rect x="622.3" y="149" width="49.8" height="15.0" fill="rgb(230,97,46)" rx="2" ry="2" />
<text  x="625.31" y="159.5" >__mem..</text>
</g>
<g >
<title>_int_realloc (2 samples, 0.02%)</title><rect x="306.9" y="101" width="0.3" height="15.0" fill="rgb(233,80,53)" rx="2" ry="2" />
<text  x="309.89" y="111.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.10%)</title><rect x="299.1" y="85" width="1.3" height="15.0" fill="rgb(248,81,2)" rx="2" ry="2" />
<text  x="302.07" y="95.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (52 samples, 0.65%)</title><rect x="381.1" y="133" width="8.3" height="15.0" fill="rgb(232,97,15)" rx="2" ry="2" />
<text  x="384.12" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (110 samples, 1.37%)</title><rect x="63.8" y="149" width="17.6" height="15.0" fill="rgb(243,3,16)" rx="2" ry="2" />
<text  x="66.79" y="159.5" ></text>
</g>
<g >
<title>strcat (1 samples, 0.01%)</title><rect x="685.2" y="117" width="0.2" height="15.0" fill="rgb(239,80,26)" rx="2" ry="2" />
<text  x="688.20" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (11 samples, 0.14%)</title><rect x="283.9" y="101" width="1.8" height="15.0" fill="rgb(218,199,38)" rx="2" ry="2" />
<text  x="286.91" y="111.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (105 samples, 1.31%)</title><rect x="462.5" y="133" width="16.8" height="15.0" fill="rgb(218,31,30)" rx="2" ry="2" />
<text  x="465.53" y="143.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (75 samples, 0.94%)</title><rect x="322.7" y="117" width="12.0" height="15.0" fill="rgb(236,82,1)" rx="2" ry="2" />
<text  x="325.70" y="127.5" ></text>
</g>
<g >
<title>__rust_dealloc (8 samples, 0.10%)</title><rect x="683.6" y="149" width="1.3" height="15.0" fill="rgb(213,105,44)" rx="2" ry="2" />
<text  x="686.60" y="159.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (41 samples, 0.51%)</title><rect x="615.8" y="149" width="6.5" height="15.0" fill="rgb(219,23,35)" rx="2" ry="2" />
<text  x="618.76" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (201 samples, 2.51%)</title><rect x="423.4" y="133" width="32.1" height="15.0" fill="rgb(243,11,24)" rx="2" ry="2" />
<text  x="426.42" y="143.5" >ha..</text>
</g>
<g >
<title>mastermind::code::compare (37 samples, 0.46%)</title><rect x="1271.6" y="165" width="5.9" height="15.0" fill="rgb(207,10,10)" rx="2" ry="2" />
<text  x="1274.64" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (122 samples, 1.52%)</title><rect x="857.3" y="149" width="19.4" height="15.0" fill="rgb(246,203,24)" rx="2" ry="2" />
<text  x="860.27" y="159.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (14 samples, 0.17%)</title><rect x="908.0" y="149" width="2.3" height="15.0" fill="rgb(236,119,37)" rx="2" ry="2" />
<text  x="911.03" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::capacity_to_buckets (9 samples, 0.11%)</title><rect x="352.5" y="117" width="1.5" height="15.0" fill="rgb(222,103,11)" rx="2" ry="2" />
<text  x="355.55" y="127.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.17%)</title><rect x="300.4" y="85" width="2.2" height="15.0" fill="rgb(216,25,1)" rx="2" ry="2" />
<text  x="303.35" y="95.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (43 samples, 0.54%)</title><rect x="1063.5" y="165" width="6.9" height="15.0" fill="rgb(215,97,16)" rx="2" ry="2" />
<text  x="1066.50" y="175.5" ></text>
</g>
<g >
<title>dl_main (3 samples, 0.04%)</title><rect x="684.9" y="133" width="0.5" height="15.0" fill="rgb(211,214,28)" rx="2" ry="2" />
<text  x="687.88" y="143.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89 samples, 1.11%)</title><rect x="246.1" y="133" width="14.2" height="15.0" fill="rgb(230,225,0)" rx="2" ry="2" />
<text  x="249.08" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (31 samples, 0.39%)</title><rect x="224.7" y="133" width="4.9" height="15.0" fill="rgb(227,218,51)" rx="2" ry="2" />
<text  x="227.69" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.50%)</title><rect x="81.4" y="149" width="6.3" height="15.0" fill="rgb(241,86,22)" rx="2" ry="2" />
<text  x="84.35" y="159.5" ></text>
</g>
<g >
<title>all (8,019 samples, 100%)</title><rect x="10.0" y="197" width="1280.0" height="15.0" fill="rgb(240,85,14)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.01%)</title><rect x="685.0" y="117" width="0.2" height="15.0" fill="rgb(224,156,30)" rx="2" ry="2" />
<text  x="688.04" y="127.5" ></text>
</g>
<g >
<title>mastermind-f32d (8,019 samples, 100.00%)</title><rect x="10.0" y="181" width="1280.0" height="15.0" fill="rgb(242,46,54)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >mastermind-f32d</text>
</g>
<g >
<title>memset (1 samples, 0.01%)</title><rect x="1040.0" y="149" width="0.2" height="15.0" fill="rgb(249,70,45)" rx="2" ry="2" />
<text  x="1043.03" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (98 samples, 1.22%)</title><rect x="841.6" y="149" width="15.7" height="15.0" fill="rgb(228,156,24)" rx="2" ry="2" />
<text  x="844.62" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (48 samples, 0.60%)</title><rect x="1133.6" y="165" width="7.6" height="15.0" fill="rgb(209,95,6)" rx="2" ry="2" />
<text  x="1136.57" y="175.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.29%)</title><rect x="344.2" y="117" width="3.7" height="15.0" fill="rgb(246,165,28)" rx="2" ry="2" />
<text  x="347.25" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (3 samples, 0.04%)</title><rect x="306.4" y="101" width="0.5" height="15.0" fill="rgb(239,41,2)" rx="2" ry="2" />
<text  x="309.42" y="111.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (81 samples, 1.01%)</title><rect x="260.3" y="117" width="12.9" height="15.0" fill="rgb(206,16,34)" rx="2" ry="2" />
<text  x="263.29" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.24%)</title><rect x="60.8" y="165" width="3.0" height="15.0" fill="rgb(235,182,22)" rx="2" ry="2" />
<text  x="63.76" y="175.5" ></text>
</g>
<g >
<title>malloc (444 samples, 5.54%)</title><rect x="1200.8" y="165" width="70.8" height="15.0" fill="rgb(247,0,0)" rx="2" ry="2" />
<text  x="1203.77" y="175.5" >malloc</text>
</g>
<g >
<title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="363.7" y="133" width="0.2" height="15.0" fill="rgb(243,214,41)" rx="2" ry="2" />
<text  x="366.72" y="143.5" ></text>
</g>
<g >
<title>__rdl_alloc (10 samples, 0.12%)</title><rect x="334.8" y="117" width="1.6" height="15.0" fill="rgb(238,116,24)" rx="2" ry="2" />
<text  x="337.83" y="127.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (15 samples, 0.19%)</title><rect x="340.1" y="117" width="2.4" height="15.0" fill="rgb(251,28,44)" rx="2" ry="2" />
<text  x="343.10" y="127.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (162 samples, 2.02%)</title><rect x="970.8" y="149" width="25.8" height="15.0" fill="rgb(205,135,3)" rx="2" ry="2" />
<text  x="973.76" y="159.5" >m..</text>
</g>
<g >
<title>_int_realloc (9 samples, 0.11%)</title><rect x="338.7" y="117" width="1.4" height="15.0" fill="rgb(251,146,44)" rx="2" ry="2" />
<text  x="341.66" y="127.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (435 samples, 5.42%)</title><rect x="757.7" y="149" width="69.4" height="15.0" fill="rgb(238,174,22)" rx="2" ry="2" />
<text  x="760.66" y="159.5" >alloc::..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (55 samples, 0.69%)</title><rect x="1124.8" y="165" width="8.8" height="15.0" fill="rgb(235,139,48)" rx="2" ry="2" />
<text  x="1127.79" y="175.5" ></text>
</g>
<g >
<title>_dl_start (1 samples, 0.01%)</title><rect x="1040.2" y="149" width="0.2" height="15.0" fill="rgb(216,59,29)" rx="2" ry="2" />
<text  x="1043.19" y="159.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.01%)</title><rect x="321.4" y="101" width="0.2" height="15.0" fill="rgb(244,32,22)" rx="2" ry="2" />
<text  x="324.42" y="111.5" ></text>
</g>
<g >
<title>malloc (79 samples, 0.99%)</title><rect x="910.3" y="149" width="12.6" height="15.0" fill="rgb(227,23,32)" rx="2" ry="2" />
<text  x="913.26" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="301.6" y="37" width="0.3" height="15.0" fill="rgb(235,77,27)" rx="2" ry="2" />
<text  x="304.63" y="47.5" ></text>
</g>
<g >
<title>__rust_alloc (6 samples, 0.07%)</title><rect x="363.9" y="133" width="0.9" height="15.0" fill="rgb(241,217,40)" rx="2" ry="2" />
<text  x="366.88" y="143.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (62 samples, 0.77%)</title><rect x="996.6" y="149" width="9.9" height="15.0" fill="rgb(243,138,49)" rx="2" ry="2" />
<text  x="999.62" y="159.5" ></text>
</g>
<g >
<title>__rdl_alloc (9 samples, 0.11%)</title><rect x="362.3" y="133" width="1.4" height="15.0" fill="rgb(244,198,37)" rx="2" ry="2" />
<text  x="365.28" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (14 samples, 0.17%)</title><rect x="87.7" y="149" width="2.3" height="15.0" fill="rgb(233,226,34)" rx="2" ry="2" />
<text  x="90.74" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::bucket_mask_to_capacity (8 samples, 0.10%)</title><rect x="1199.5" y="165" width="1.3" height="15.0" fill="rgb(249,15,11)" rx="2" ry="2" />
<text  x="1202.49" y="175.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (1 samples, 0.01%)</title><rect x="1022.5" y="149" width="0.1" height="15.0" fill="rgb(240,150,53)" rx="2" ry="2" />
<text  x="1025.48" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.02%)</title><rect x="369.5" y="133" width="0.3" height="15.0" fill="rgb(228,176,18)" rx="2" ry="2" />
<text  x="372.47" y="143.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (158 samples, 1.97%)</title><rect x="90.0" y="149" width="25.2" height="15.0" fill="rgb(210,88,4)" rx="2" ry="2" />
<text  x="92.97" y="159.5" >&lt;..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.07%)</title><rect x="308.5" y="101" width="0.9" height="15.0" fill="rgb(228,48,34)" rx="2" ry="2" />
<text  x="311.49" y="111.5" ></text>
</g>
<g >
<title>malloc (16 samples, 0.20%)</title><rect x="455.5" y="133" width="2.6" height="15.0" fill="rgb(245,36,2)" rx="2" ry="2" />
<text  x="458.50" y="143.5" ></text>
</g>
<g >
<title>__rdl_alloc (52 samples, 0.65%)</title><rect x="672.1" y="149" width="8.3" height="15.0" fill="rgb(224,87,26)" rx="2" ry="2" />
<text  x="675.11" y="159.5" ></text>
</g>
<g >
<title>__rdl_dealloc (8 samples, 0.10%)</title><rect x="680.4" y="149" width="1.3" height="15.0" fill="rgb(248,196,43)" rx="2" ry="2" />
<text  x="683.41" y="159.5" ></text>
</g>
<g >
<title>mastermind::code::compare (2 samples, 0.02%)</title><rect x="309.8" y="101" width="0.3" height="15.0" fill="rgb(232,173,28)" rx="2" ry="2" />
<text  x="312.77" y="111.5" ></text>
</g>
<g >
<title>_init (1 samples, 0.01%)</title><rect x="1040.4" y="165" width="0.1" height="15.0" fill="rgb(232,34,41)" rx="2" ry="2" />
<text  x="1043.35" y="175.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (710 samples, 8.85%)</title><rect x="502.4" y="149" width="113.4" height="15.0" fill="rgb(211,86,23)" rx="2" ry="2" />
<text  x="505.43" y="159.5" >__memmove_sse2..</text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.10%)</title><rect x="115.2" y="149" width="1.3" height="15.0" fill="rgb(245,139,54)" rx="2" ry="2" />
<text  x="118.19" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (8 samples, 0.10%)</title><rect x="1107.1" y="165" width="1.3" height="15.0" fill="rgb(217,119,30)" rx="2" ry="2" />
<text  x="1110.07" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (26 samples, 0.32%)</title><rect x="376.8" y="133" width="4.2" height="15.0" fill="rgb(216,195,8)" rx="2" ry="2" />
<text  x="379.81" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="298.6" y="85" width="0.2" height="15.0" fill="rgb(249,50,1)" rx="2" ry="2" />
<text  x="301.59" y="95.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (103 samples, 1.28%)</title><rect x="1108.4" y="165" width="16.4" height="15.0" fill="rgb(214,43,32)" rx="2" ry="2" />
<text  x="1111.35" y="175.5" ></text>
</g>
<g >
<title>_dl_load_cache_lookup (1 samples, 0.01%)</title><rect x="1039.6" y="149" width="0.1" height="15.0" fill="rgb(243,60,23)" rx="2" ry="2" />
<text  x="1042.55" y="159.5" ></text>
</g>
<g >
<title>_int_free (19 samples, 0.24%)</title><rect x="303.4" y="101" width="3.0" height="15.0" fill="rgb(225,204,15)" rx="2" ry="2" />
<text  x="306.38" y="111.5" ></text>
</g>
<g >
<title>__rust_alloc (3 samples, 0.04%)</title><rect x="1037.2" y="165" width="0.4" height="15.0" fill="rgb(238,39,30)" rx="2" ry="2" />
<text  x="1040.16" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (91 samples, 1.13%)</title><rect x="1070.4" y="165" width="14.5" height="15.0" fill="rgb(216,176,6)" rx="2" ry="2" />
<text  x="1073.36" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.01%)</title><rect x="841.5" y="149" width="0.1" height="15.0" fill="rgb(239,151,20)" rx="2" ry="2" />
<text  x="844.47" y="159.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="273.2" y="117" width="0.2" height="15.0" fill="rgb(235,10,52)" rx="2" ry="2" />
<text  x="276.21" y="127.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="301.9" y="37" width="0.2" height="15.0" fill="rgb(208,41,0)" rx="2" ry="2" />
<text  x="304.95" y="47.5" ></text>
</g>
<g >
<title>_dl_setup_hash (1 samples, 0.01%)</title><rect x="1039.9" y="149" width="0.1" height="15.0" fill="rgb(238,114,12)" rx="2" ry="2" />
<text  x="1042.87" y="159.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.04%)</title><rect x="338.0" y="117" width="0.5" height="15.0" fill="rgb(222,44,9)" rx="2" ry="2" />
<text  x="341.02" y="127.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (6 samples, 0.07%)</title><rect x="229.8" y="133" width="1.0" height="15.0" fill="rgb(249,17,14)" rx="2" ry="2" />
<text  x="232.80" y="143.5" ></text>
</g>
<g >
<title>_int_realloc (7 samples, 0.09%)</title><rect x="756.5" y="149" width="1.2" height="15.0" fill="rgb(219,65,24)" rx="2" ry="2" />
<text  x="759.55" y="159.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.01%)</title><rect x="302.1" y="37" width="0.2" height="15.0" fill="rgb(230,135,44)" rx="2" ry="2" />
<text  x="305.11" y="47.5" ></text>
</g>
<g >
<title>mastermind::code::compare (21 samples, 0.26%)</title><rect x="458.1" y="133" width="3.3" height="15.0" fill="rgb(243,132,23)" rx="2" ry="2" />
<text  x="461.06" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="338.5" y="117" width="0.2" height="15.0" fill="rgb(252,154,50)" rx="2" ry="2" />
<text  x="341.50" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::static_empty (2 samples, 0.02%)</title><rect x="309.4" y="101" width="0.4" height="15.0" fill="rgb(242,16,44)" rx="2" ry="2" />
<text  x="312.45" y="111.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (53 samples, 0.66%)</title><rect x="310.1" y="101" width="8.4" height="15.0" fill="rgb(235,140,32)" rx="2" ry="2" />
<text  x="313.09" y="111.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (22 samples, 0.27%)</title><rect x="373.3" y="133" width="3.5" height="15.0" fill="rgb(220,206,38)" rx="2" ry="2" />
<text  x="376.30" y="143.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::hash::Hash&gt;::hash (60 samples, 0.75%)</title><rect x="215.1" y="133" width="9.6" height="15.0" fill="rgb(213,168,23)" rx="2" ry="2" />
<text  x="218.11" y="143.5" ></text>
</g>
<g >
<title>__rust_alloc (12 samples, 0.15%)</title><rect x="681.7" y="149" width="1.9" height="15.0" fill="rgb(236,23,15)" rx="2" ry="2" />
<text  x="684.68" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (206 samples, 2.57%)</title><rect x="390.5" y="133" width="32.9" height="15.0" fill="rgb(212,1,6)" rx="2" ry="2" />
<text  x="393.54" y="143.5" >ha..</text>
</g>
<g >
<title>__rust_alloc (2 samples, 0.02%)</title><rect x="337.5" y="117" width="0.4" height="15.0" fill="rgb(211,78,9)" rx="2" ry="2" />
<text  x="340.54" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 0.70%)</title><rect x="876.7" y="149" width="9.0" height="15.0" fill="rgb(233,78,1)" rx="2" ry="2" />
<text  x="879.74" y="159.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.01%)</title><rect x="1289.8" y="165" width="0.2" height="15.0" fill="rgb(214,137,32)" rx="2" ry="2" />
<text  x="1292.84" y="175.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.07%)</title><rect x="301.6" y="69" width="1.0" height="15.0" fill="rgb(229,219,52)" rx="2" ry="2" />
<text  x="304.63" y="79.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (2 samples, 0.02%)</title><rect x="354.5" y="117" width="0.3" height="15.0" fill="rgb(247,62,40)" rx="2" ry="2" />
<text  x="357.46" y="127.5" ></text>
</g>
<g >
<title>_dl_addr (1 samples, 0.01%)</title><rect x="1039.2" y="165" width="0.2" height="15.0" fill="rgb(229,77,21)" rx="2" ry="2" />
<text  x="1042.24" y="175.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3 samples, 0.04%)</title><rect x="684.9" y="149" width="0.5" height="15.0" fill="rgb(211,7,37)" rx="2" ry="2" />
<text  x="687.88" y="159.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="229.6" y="133" width="0.2" height="15.0" fill="rgb(212,75,33)" rx="2" ry="2" />
<text  x="232.64" y="143.5" ></text>
</g>
<g >
<title>[unknown] (639 samples, 7.97%)</title><rect x="260.3" y="133" width="102.0" height="15.0" fill="rgb(221,39,25)" rx="2" ry="2" />
<text  x="263.29" y="143.5" >[unknown]</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (140 samples, 1.75%)</title><rect x="885.7" y="149" width="22.3" height="15.0" fill="rgb(212,55,42)" rx="2" ry="2" />
<text  x="888.68" y="159.5" >c..</text>
</g>
<g >
<title>_int_free (29 samples, 0.36%)</title><rect x="364.8" y="133" width="4.7" height="15.0" fill="rgb(220,45,14)" rx="2" ry="2" />
<text  x="367.84" y="143.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="501.8" y="133" width="0.2" height="15.0" fill="rgb(217,218,41)" rx="2" ry="2" />
<text  x="504.79" y="143.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (18 samples, 0.22%)</title><rect x="1287.0" y="165" width="2.8" height="15.0" fill="rgb(211,61,11)" rx="2" ry="2" />
<text  x="1289.97" y="175.5" ></text>
</g>
<g >
<title>[unknown] (6,007 samples, 74.91%)</title><rect x="63.8" y="165" width="958.8" height="15.0" fill="rgb(215,165,53)" rx="2" ry="2" />
<text  x="66.79" y="175.5" >[unknown]</text>
</g>
</g>
</svg>
