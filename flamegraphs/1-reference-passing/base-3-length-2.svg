<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1300" height="678" onload="init(evt)" viewBox="0 0 1300 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1300.0" height="678.0" fill="url(#background)"  />
<text id="title" x="650.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1190.00" y="24" >Search</text>
<text id="ignorecase" x="1274.00" y="24" >ic</text>
<text id="matched" x="1190.00" y="661" > </text>
<g id="frames">
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (55 samples, 0.04%)</title><rect x="161.1" y="517" width="0.5" height="15.0" fill="rgb(249,106,7)" rx="2" ry="2" />
<text  x="164.12" y="527.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (816 samples, 0.57%)</title><rect x="950.3" y="597" width="7.2" height="15.0" fill="rgb(253,148,45)" rx="2" ry="2" />
<text  x="953.25" y="607.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.01%)</title><rect x="158.7" y="261" width="0.1" height="15.0" fill="rgb(228,111,45)" rx="2" ry="2" />
<text  x="161.67" y="271.5" ></text>
</g>
<g >
<title>__rdl_alloc (167 samples, 0.12%)</title><rect x="217.6" y="549" width="1.5" height="15.0" fill="rgb(238,208,47)" rx="2" ry="2" />
<text  x="220.62" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (6,800 samples, 4.73%)</title><rect x="15.8" y="597" width="60.6" height="15.0" fill="rgb(224,127,28)" rx="2" ry="2" />
<text  x="18.84" y="607.5" >&lt;alloc..</text>
</g>
<g >
<title>__rust_alloc (387 samples, 0.27%)</title><rect x="495.8" y="581" width="3.4" height="15.0" fill="rgb(234,139,46)" rx="2" ry="2" />
<text  x="498.80" y="591.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (582 samples, 0.40%)</title><rect x="429.8" y="581" width="5.2" height="15.0" fill="rgb(235,77,24)" rx="2" ry="2" />
<text  x="432.84" y="591.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.02%)</title><rect x="159.5" y="485" width="0.2" height="15.0" fill="rgb(243,167,18)" rx="2" ry="2" />
<text  x="162.53" y="495.5" ></text>
</g>
<g >
<title>malloc (140 samples, 0.10%)</title><rect x="242.5" y="549" width="1.3" height="15.0" fill="rgb(247,100,47)" rx="2" ry="2" />
<text  x="245.53" y="559.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (508 samples, 0.35%)</title><rect x="196.8" y="549" width="4.5" height="15.0" fill="rgb(249,47,36)" rx="2" ry="2" />
<text  x="199.78" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (499 samples, 0.35%)</title><rect x="130.5" y="581" width="4.4" height="15.0" fill="rgb(222,86,20)" rx="2" ry="2" />
<text  x="133.47" y="591.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="149" width="0.1" height="15.0" fill="rgb(225,56,20)" rx="2" ry="2" />
<text  x="161.67" y="159.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (22 samples, 0.02%)</title><rect x="1045.2" y="597" width="0.2" height="15.0" fill="rgb(234,168,45)" rx="2" ry="2" />
<text  x="1048.23" y="607.5" ></text>
</g>
<g >
<title>mastermind::tree::generate (1,677 samples, 1.17%)</title><rect x="1200.0" y="597" width="14.9" height="15.0" fill="rgb(242,65,16)" rx="2" ry="2" />
<text  x="1203.01" y="607.5" ></text>
</g>
<g >
<title>[unknown] (2,150 samples, 1.50%)</title><rect x="158.0" y="549" width="19.2" height="15.0" fill="rgb(224,130,52)" rx="2" ry="2" />
<text  x="161.00" y="559.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 0.02%)</title><rect x="158.7" y="437" width="0.2" height="15.0" fill="rgb(236,2,12)" rx="2" ry="2" />
<text  x="161.66" y="447.5" ></text>
</g>
<g >
<title>__rdl_alloc (1,337 samples, 0.93%)</title><rect x="481.5" y="581" width="11.9" height="15.0" fill="rgb(213,102,15)" rx="2" ry="2" />
<text  x="484.52" y="591.5" ></text>
</g>
<g >
<title>[unknown] (26 samples, 0.02%)</title><rect x="158.7" y="421" width="0.2" height="15.0" fill="rgb(212,214,41)" rx="2" ry="2" />
<text  x="161.66" y="431.5" ></text>
</g>
<g >
<title>[unknown] (91,747 samples, 63.84%)</title><rect x="124.3" y="597" width="817.2" height="15.0" fill="rgb(205,179,19)" rx="2" ry="2" />
<text  x="127.29" y="607.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (15 samples, 0.01%)</title><rect x="158.7" y="229" width="0.1" height="15.0" fill="rgb(214,92,21)" rx="2" ry="2" />
<text  x="161.67" y="239.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (16 samples, 0.01%)</title><rect x="941.3" y="581" width="0.2" height="15.0" fill="rgb(246,50,31)" rx="2" ry="2" />
<text  x="944.31" y="591.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (914 samples, 0.64%)</title><rect x="234.4" y="549" width="8.1" height="15.0" fill="rgb(235,17,37)" rx="2" ry="2" />
<text  x="237.39" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (258 samples, 0.18%)</title><rect x="79.1" y="597" width="2.3" height="15.0" fill="rgb(229,178,50)" rx="2" ry="2" />
<text  x="82.05" y="607.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1,427 samples, 0.99%)</title><rect x="1032.5" y="597" width="12.7" height="15.0" fill="rgb(215,174,27)" rx="2" ry="2" />
<text  x="1035.53" y="607.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="158.9" y="469" width="0.3" height="15.0" fill="rgb(214,65,21)" rx="2" ry="2" />
<text  x="161.95" y="479.5" ></text>
</g>
<g >
<title>__rdl_dealloc (201 samples, 0.14%)</title><rect x="969.2" y="597" width="1.8" height="15.0" fill="rgb(251,154,10)" rx="2" ry="2" />
<text  x="972.16" y="607.5" ></text>
</g>
<g >
<title>__rdl_dealloc (263 samples, 0.18%)</title><rect x="493.4" y="581" width="2.4" height="15.0" fill="rgb(215,121,52)" rx="2" ry="2" />
<text  x="496.43" y="591.5" ></text>
</g>
<g >
<title>[unknown] (491 samples, 0.34%)</title><rect x="158.1" y="533" width="4.3" height="15.0" fill="rgb(252,105,34)" rx="2" ry="2" />
<text  x="161.07" y="543.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (1,458 samples, 1.01%)</title><rect x="928.3" y="581" width="13.0" height="15.0" fill="rgb(236,62,19)" rx="2" ry="2" />
<text  x="931.33" y="591.5" ></text>
</g>
<g >
<title>_int_malloc (69 samples, 0.05%)</title><rect x="229.4" y="549" width="0.6" height="15.0" fill="rgb(229,218,6)" rx="2" ry="2" />
<text  x="232.35" y="559.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (395 samples, 0.27%)</title><rect x="1284.8" y="597" width="3.5" height="15.0" fill="rgb(218,88,46)" rx="2" ry="2" />
<text  x="1287.77" y="607.5" ></text>
</g>
<g >
<title>all (143,712 samples, 100%)</title><rect x="10.0" y="629" width="1280.0" height="15.0" fill="rgb(220,28,46)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1,836 samples, 1.28%)</title><rect x="1004.8" y="597" width="16.3" height="15.0" fill="rgb(247,36,49)" rx="2" ry="2" />
<text  x="1007.79" y="607.5" ></text>
</g>
<g >
<title>alloc::collections::btree::search::search_tree (2,196 samples, 1.53%)</title><rect x="710.0" y="581" width="19.5" height="15.0" fill="rgb(250,36,10)" rx="2" ry="2" />
<text  x="712.97" y="591.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="117" width="0.1" height="15.0" fill="rgb(211,53,24)" rx="2" ry="2" />
<text  x="161.67" y="127.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::Entry&lt;K,V&gt;::or_insert_with (4,557 samples, 3.17%)</title><rect x="622.0" y="581" width="40.6" height="15.0" fill="rgb(227,108,42)" rx="2" ry="2" />
<text  x="625.03" y="591.5" >all..</text>
</g>
<g >
<title>[unknown] (24 samples, 0.02%)</title><rect x="158.7" y="373" width="0.2" height="15.0" fill="rgb(253,139,46)" rx="2" ry="2" />
<text  x="161.67" y="383.5" ></text>
</g>
<g >
<title>malloc (10,710 samples, 7.45%)</title><rect x="1070.9" y="597" width="95.4" height="15.0" fill="rgb(222,142,9)" rx="2" ry="2" />
<text  x="1073.90" y="607.5" >malloc</text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="85" width="0.1" height="15.0" fill="rgb(236,222,49)" rx="2" ry="2" />
<text  x="161.67" y="95.5" ></text>
</g>
<g >
<title>realloc (23 samples, 0.02%)</title><rect x="162.2" y="517" width="0.2" height="15.0" fill="rgb(233,62,21)" rx="2" ry="2" />
<text  x="165.24" y="527.5" ></text>
</g>
<g >
<title>realloc (38 samples, 0.03%)</title><rect x="160.6" y="501" width="0.3" height="15.0" fill="rgb(253,157,41)" rx="2" ry="2" />
<text  x="163.60" y="511.5" ></text>
</g>
<g >
<title>mastermind::tree::generate_children (7,840 samples, 5.46%)</title><rect x="1214.9" y="597" width="69.9" height="15.0" fill="rgb(216,159,23)" rx="2" ry="2" />
<text  x="1217.94" y="607.5" >masterm..</text>
</g>
<g >
<title>__rust_dealloc (272 samples, 0.19%)</title><rect x="499.2" y="581" width="2.5" height="15.0" fill="rgb(229,170,6)" rx="2" ry="2" />
<text  x="502.25" y="591.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (71 samples, 0.05%)</title><rect x="161.6" y="517" width="0.6" height="15.0" fill="rgb(214,129,37)" rx="2" ry="2" />
<text  x="164.61" y="527.5" ></text>
</g>
<g >
<title>__rust_alloc (96 samples, 0.07%)</title><rect x="971.0" y="597" width="0.8" height="15.0" fill="rgb(231,197,25)" rx="2" ry="2" />
<text  x="973.96" y="607.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (297 samples, 0.21%)</title><rect x="76.4" y="597" width="2.7" height="15.0" fill="rgb(212,174,33)" rx="2" ry="2" />
<text  x="79.41" y="607.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (655 samples, 0.46%)</title><rect x="10.0" y="597" width="5.8" height="15.0" fill="rgb(221,48,1)" rx="2" ry="2" />
<text  x="13.01" y="607.5" ></text>
</g>
<g >
<title>mastermind::tree::rank::by_depth_u32 (1,882 samples, 1.31%)</title><rect x="911.6" y="581" width="16.7" height="15.0" fill="rgb(242,155,23)" rx="2" ry="2" />
<text  x="914.56" y="591.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="197" width="0.1" height="15.0" fill="rgb(235,81,41)" rx="2" ry="2" />
<text  x="161.67" y="207.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (5,221 samples, 3.63%)</title><rect x="435.0" y="581" width="46.5" height="15.0" fill="rgb(216,29,49)" rx="2" ry="2" />
<text  x="438.02" y="591.5" >__me..</text>
</g>
<g >
<title>mastermind::tree::answers_by_response (6,477 samples, 4.51%)</title><rect x="853.9" y="581" width="57.7" height="15.0" fill="rgb(209,27,23)" rx="2" ry="2" />
<text  x="856.87" y="591.5" >master..</text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (4,314 samples, 3.00%)</title><rect x="580.3" y="581" width="38.4" height="15.0" fill="rgb(254,189,38)" rx="2" ry="2" />
<text  x="583.25" y="591.5" >all..</text>
</g>
<g >
<title>mastermind-899f (143,712 samples, 100.00%)</title><rect x="10.0" y="613" width="1280.0" height="15.0" fill="rgb(228,30,46)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >mastermind-899f</text>
</g>
<g >
<title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1,278 samples, 0.89%)</title><rect x="1021.1" y="597" width="11.4" height="15.0" fill="rgb(244,125,19)" rx="2" ry="2" />
<text  x="1024.14" y="607.5" ></text>
</g>
<g >
<title>_int_malloc (317 samples, 0.22%)</title><rect x="986.9" y="597" width="2.8" height="15.0" fill="rgb(229,65,8)" rx="2" ry="2" />
<text  x="989.89" y="607.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,449 samples, 1.01%)</title><rect x="1058.0" y="597" width="12.9" height="15.0" fill="rgb(237,228,21)" rx="2" ry="2" />
<text  x="1060.99" y="607.5" ></text>
</g>
<g >
<title>_int_free (228 samples, 0.16%)</title><rect x="258.7" y="565" width="2.0" height="15.0" fill="rgb(231,8,11)" rx="2" ry="2" />
<text  x="261.67" y="575.5" ></text>
</g>
<g >
<title>_int_realloc (332 samples, 0.23%)</title><rect x="577.3" y="581" width="3.0" height="15.0" fill="rgb(233,197,41)" rx="2" ry="2" />
<text  x="580.29" y="591.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.01%)</title><rect x="158.7" y="53" width="0.1" height="15.0" fill="rgb(222,72,53)" rx="2" ry="2" />
<text  x="161.67" y="63.5" ></text>
</g>
<g >
<title>_int_malloc (21 samples, 0.01%)</title><rect x="260.7" y="565" width="0.2" height="15.0" fill="rgb(231,120,44)" rx="2" ry="2" />
<text  x="263.70" y="575.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (40 samples, 0.03%)</title><rect x="159.2" y="469" width="0.3" height="15.0" fill="rgb(253,21,9)" rx="2" ry="2" />
<text  x="162.18" y="479.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.02%)</title><rect x="158.6" y="453" width="0.3" height="15.0" fill="rgb(223,43,53)" rx="2" ry="2" />
<text  x="161.64" y="463.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (18,767 samples, 13.06%)</title><rect x="262.7" y="581" width="167.1" height="15.0" fill="rgb(226,64,53)" rx="2" ry="2" />
<text  x="265.68" y="591.5" >__memmove_sse2_unalig..</text>
</g>
<g >
<title>[unknown] (20 samples, 0.01%)</title><rect x="158.7" y="293" width="0.1" height="15.0" fill="rgb(223,134,21)" rx="2" ry="2" />
<text  x="161.67" y="303.5" ></text>
</g>
<g >
<title>__rust_realloc (32 samples, 0.02%)</title><rect x="222.3" y="549" width="0.3" height="15.0" fill="rgb(252,0,38)" rx="2" ry="2" />
<text  x="225.32" y="559.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (606 samples, 0.42%)</title><rect x="941.5" y="597" width="5.4" height="15.0" fill="rgb(241,140,15)" rx="2" ry="2" />
<text  x="944.46" y="607.5" ></text>
</g>
<g >
<title>[unknown] (14,157 samples, 9.85%)</title><rect x="135.1" y="581" width="126.1" height="15.0" fill="rgb(215,49,51)" rx="2" ry="2" />
<text  x="138.08" y="591.5" >[unknown]</text>
</g>
<g >
<title>_int_malloc (279 samples, 0.19%)</title><rect x="574.8" y="581" width="2.5" height="15.0" fill="rgb(205,56,29)" rx="2" ry="2" />
<text  x="577.81" y="591.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (168 samples, 0.12%)</title><rect x="261.2" y="581" width="1.5" height="15.0" fill="rgb(226,127,48)" rx="2" ry="2" />
<text  x="264.19" y="591.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.02%)</title><rect x="158.7" y="357" width="0.2" height="15.0" fill="rgb(217,177,42)" rx="2" ry="2" />
<text  x="161.67" y="367.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (52 samples, 0.04%)</title><rect x="158.1" y="517" width="0.4" height="15.0" fill="rgb(245,93,38)" rx="2" ry="2" />
<text  x="161.08" y="527.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (2,201 samples, 1.53%)</title><rect x="177.2" y="549" width="19.6" height="15.0" fill="rgb(210,29,35)" rx="2" ry="2" />
<text  x="180.15" y="559.5" ></text>
</g>
<g >
<title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (5,316 samples, 3.70%)</title><rect x="662.6" y="581" width="47.4" height="15.0" fill="rgb(251,203,30)" rx="2" ry="2" />
<text  x="665.62" y="591.5" >allo..</text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (187 samples, 0.13%)</title><rect x="1288.3" y="597" width="1.7" height="15.0" fill="rgb(227,145,43)" rx="2" ry="2" />
<text  x="1291.29" y="607.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="165" width="0.1" height="15.0" fill="rgb(221,111,17)" rx="2" ry="2" />
<text  x="161.67" y="175.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,185 samples, 0.82%)</title><rect x="989.8" y="597" width="10.6" height="15.0" fill="rgb(234,141,50)" rx="2" ry="2" />
<text  x="992.81" y="607.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (38 samples, 0.03%)</title><rect x="159.7" y="485" width="0.4" height="15.0" fill="rgb(208,83,16)" rx="2" ry="2" />
<text  x="162.73" y="495.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,156 samples, 1.50%)</title><rect x="729.5" y="581" width="19.2" height="15.0" fill="rgb(226,184,11)" rx="2" ry="2" />
<text  x="732.53" y="591.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="160.2" y="501" width="0.1" height="15.0" fill="rgb(219,130,3)" rx="2" ry="2" />
<text  x="163.18" y="511.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="181" width="0.1" height="15.0" fill="rgb(228,143,13)" rx="2" ry="2" />
<text  x="161.67" y="191.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="133" width="0.1" height="15.0" fill="rgb(206,83,29)" rx="2" ry="2" />
<text  x="161.67" y="143.5" ></text>
</g>
<g >
<title>realloc (1,275 samples, 0.89%)</title><rect x="247.3" y="549" width="11.4" height="15.0" fill="rgb(217,18,39)" rx="2" ry="2" />
<text  x="250.31" y="559.5" ></text>
</g>
<g >
<title>[unknown] (15 samples, 0.01%)</title><rect x="158.7" y="213" width="0.1" height="15.0" fill="rgb(249,9,50)" rx="2" ry="2" />
<text  x="161.67" y="223.5" ></text>
</g>
<g >
<title>__rdl_realloc (17 samples, 0.01%)</title><rect x="160.9" y="517" width="0.2" height="15.0" fill="rgb(245,32,50)" rx="2" ry="2" />
<text  x="163.94" y="527.5" ></text>
</g>
<g >
<title>malloc (2,434 samples, 1.69%)</title><rect x="770.5" y="581" width="21.6" height="15.0" fill="rgb(237,54,11)" rx="2" ry="2" />
<text  x="773.45" y="591.5" >m..</text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (1,831 samples, 1.27%)</title><rect x="201.3" y="549" width="16.3" height="15.0" fill="rgb(227,168,30)" rx="2" ry="2" />
<text  x="204.31" y="559.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.01%)</title><rect x="162.6" y="533" width="0.1" height="15.0" fill="rgb(241,206,53)" rx="2" ry="2" />
<text  x="165.56" y="543.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.01%)</title><rect x="158.7" y="37" width="0.1" height="15.0" fill="rgb(229,70,34)" rx="2" ry="2" />
<text  x="161.67" y="47.5" ></text>
</g>
<g >
<title>__rdl_alloc (1,307 samples, 0.91%)</title><rect x="957.5" y="597" width="11.7" height="15.0" fill="rgb(228,131,10)" rx="2" ry="2" />
<text  x="960.52" y="607.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (381 samples, 0.27%)</title><rect x="946.9" y="597" width="3.4" height="15.0" fill="rgb(211,82,45)" rx="2" ry="2" />
<text  x="949.86" y="607.5" ></text>
</g>
<g >
<title>_int_free (1,487 samples, 1.03%)</title><rect x="973.6" y="597" width="13.3" height="15.0" fill="rgb(254,168,2)" rx="2" ry="2" />
<text  x="976.64" y="607.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (497 samples, 0.35%)</title><rect x="1000.4" y="597" width="4.4" height="15.0" fill="rgb(237,95,26)" rx="2" ry="2" />
<text  x="1003.36" y="607.5" ></text>
</g>
<g >
<title>[unknown] (102 samples, 0.07%)</title><rect x="158.6" y="485" width="0.9" height="15.0" fill="rgb(254,113,10)" rx="2" ry="2" />
<text  x="161.63" y="495.5" ></text>
</g>
<g >
<title>mastermind::code::compare (6,932 samples, 4.82%)</title><rect x="792.1" y="581" width="61.8" height="15.0" fill="rgb(251,170,49)" rx="2" ry="2" />
<text  x="795.13" y="591.5" >master..</text>
</g>
<g >
<title>[unknown] (14 samples, 0.01%)</title><rect x="158.7" y="101" width="0.1" height="15.0" fill="rgb(237,177,41)" rx="2" ry="2" />
<text  x="161.67" y="111.5" ></text>
</g>
<g >
<title>[unknown] (269 samples, 0.19%)</title><rect x="158.5" y="517" width="2.4" height="15.0" fill="rgb(242,74,23)" rx="2" ry="2" />
<text  x="161.55" y="527.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.02%)</title><rect x="158.7" y="341" width="0.2" height="15.0" fill="rgb(246,59,16)" rx="2" ry="2" />
<text  x="161.67" y="351.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,821 samples, 3.35%)</title><rect x="81.4" y="597" width="42.9" height="15.0" fill="rgb(229,153,33)" rx="2" ry="2" />
<text  x="84.35" y="607.5" >&lt;cor..</text>
</g>
<g >
<title>__rust_alloc (93 samples, 0.06%)</title><rect x="221.5" y="549" width="0.8" height="15.0" fill="rgb(225,17,33)" rx="2" ry="2" />
<text  x="224.49" y="559.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,115 samples, 1.47%)</title><rect x="748.7" y="581" width="18.9" height="15.0" fill="rgb(214,92,35)" rx="2" ry="2" />
<text  x="751.73" y="591.5" ></text>
</g>
<g >
<title>mastermind::code::compare (1,974 samples, 1.37%)</title><rect x="1166.3" y="597" width="17.6" height="15.0" fill="rgb(236,219,9)" rx="2" ry="2" />
<text  x="1169.29" y="607.5" ></text>
</g>
<g >
<title>_int_realloc (20 samples, 0.01%)</title><rect x="260.9" y="565" width="0.2" height="15.0" fill="rgb(224,96,14)" rx="2" ry="2" />
<text  x="263.88" y="575.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (1,603 samples, 1.12%)</title><rect x="162.8" y="533" width="14.3" height="15.0" fill="rgb(222,132,36)" rx="2" ry="2" />
<text  x="165.79" y="543.5" ></text>
</g>
<g >
<title>_int_free (758 samples, 0.53%)</title><rect x="222.6" y="549" width="6.8" height="15.0" fill="rgb(234,20,11)" rx="2" ry="2" />
<text  x="225.60" y="559.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.02%)</title><rect x="158.7" y="325" width="0.2" height="15.0" fill="rgb(240,57,48)" rx="2" ry="2" />
<text  x="161.67" y="335.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.01%)</title><rect x="158.7" y="69" width="0.1" height="15.0" fill="rgb(230,12,18)" rx="2" ry="2" />
<text  x="161.67" y="79.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (30 samples, 0.02%)</title><rect x="160.3" y="501" width="0.3" height="15.0" fill="rgb(213,158,52)" rx="2" ry="2" />
<text  x="163.34" y="511.5" ></text>
</g>
<g >
<title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (377 samples, 0.26%)</title><rect x="618.7" y="581" width="3.3" height="15.0" fill="rgb(205,9,26)" rx="2" ry="2" />
<text  x="621.68" y="591.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (383 samples, 0.27%)</title><rect x="243.8" y="549" width="3.4" height="15.0" fill="rgb(244,3,39)" rx="2" ry="2" />
<text  x="246.77" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (2,570 samples, 1.79%)</title><rect x="135.1" y="549" width="22.9" height="15.0" fill="rgb(235,1,47)" rx="2" ry="2" />
<text  x="138.09" y="559.5" >&lt;..</text>
</g>
<g >
<title>_int_realloc (496 samples, 0.35%)</title><rect x="230.0" y="549" width="4.4" height="15.0" fill="rgb(238,113,20)" rx="2" ry="2" />
<text  x="232.97" y="559.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.01%)</title><rect x="158.7" y="277" width="0.1" height="15.0" fill="rgb(246,43,10)" rx="2" ry="2" />
<text  x="161.67" y="287.5" ></text>
</g>
<g >
<title>__rust_dealloc (199 samples, 0.14%)</title><rect x="971.8" y="597" width="1.8" height="15.0" fill="rgb(207,39,34)" rx="2" ry="2" />
<text  x="974.82" y="607.5" ></text>
</g>
<g >
<title>[unknown] (166 samples, 0.12%)</title><rect x="158.6" y="501" width="1.5" height="15.0" fill="rgb(240,228,6)" rx="2" ry="2" />
<text  x="161.59" y="511.5" ></text>
</g>
<g >
<title>[libc-2.29.so] (17 samples, 0.01%)</title><rect x="134.9" y="581" width="0.2" height="15.0" fill="rgb(239,24,2)" rx="2" ry="2" />
<text  x="137.93" y="591.5" ></text>
</g>
<g >
<title>mastermind::tree::answers_by_response (1,810 samples, 1.26%)</title><rect x="1183.9" y="597" width="16.1" height="15.0" fill="rgb(207,118,39)" rx="2" ry="2" />
<text  x="1186.89" y="607.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.02%)</title><rect x="158.7" y="405" width="0.2" height="15.0" fill="rgb(248,141,36)" rx="2" ry="2" />
<text  x="161.67" y="415.5" ></text>
</g>
<g >
<title>[unknown] (13,874 samples, 9.65%)</title><rect x="135.1" y="565" width="123.6" height="15.0" fill="rgb(215,87,8)" rx="2" ry="2" />
<text  x="138.09" y="575.5" >[unknown]</text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (14 samples, 0.01%)</title><rect x="247.2" y="549" width="0.1" height="15.0" fill="rgb(246,59,0)" rx="2" ry="2" />
<text  x="250.19" y="559.5" ></text>
</g>
<g >
<title>__rdl_realloc (268 samples, 0.19%)</title><rect x="219.1" y="549" width="2.4" height="15.0" fill="rgb(217,109,0)" rx="2" ry="2" />
<text  x="222.10" y="559.5" ></text>
</g>
<g >
<title>_int_free (8,209 samples, 5.71%)</title><rect x="501.7" y="581" width="73.1" height="15.0" fill="rgb(239,130,44)" rx="2" ry="2" />
<text  x="504.69" y="591.5" >_int_free</text>
</g>
<g >
<title>[unknown] (16 samples, 0.01%)</title><rect x="158.7" y="245" width="0.1" height="15.0" fill="rgb(207,182,38)" rx="2" ry="2" />
<text  x="161.67" y="255.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.01%)</title><rect x="158.7" y="309" width="0.1" height="15.0" fill="rgb(211,130,30)" rx="2" ry="2" />
<text  x="161.67" y="319.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::copy_from_slice (322 samples, 0.22%)</title><rect x="767.6" y="581" width="2.8" height="15.0" fill="rgb(221,155,1)" rx="2" ry="2" />
<text  x="770.57" y="591.5" ></text>
</g>
<g >
<title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (694 samples, 0.48%)</title><rect x="124.3" y="581" width="6.2" height="15.0" fill="rgb(208,11,22)" rx="2" ry="2" />
<text  x="127.29" y="591.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.02%)</title><rect x="158.7" y="389" width="0.2" height="15.0" fill="rgb(209,95,40)" rx="2" ry="2" />
<text  x="161.67" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,410 samples, 0.98%)</title><rect x="1045.4" y="597" width="12.6" height="15.0" fill="rgb(251,164,26)" rx="2" ry="2" />
<text  x="1048.43" y="607.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 0.02%)</title><rect x="158.6" y="469" width="0.3" height="15.0" fill="rgb(217,155,7)" rx="2" ry="2" />
<text  x="161.64" y="479.5" ></text>
</g>
</g>
</svg>
